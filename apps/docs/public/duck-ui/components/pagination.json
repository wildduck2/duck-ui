{
  "name": "pagination",
  "type": "registry:ui",
  "dependencies": [
    "@gentleduck/libs"
  ],
  "registryDependencies": [
    "button"
  ],
  "root_folder": "pagination",
  "files": [
    {
      "path": "pagination/index.ts",
      "content": "export * from './pagination'\nexport * from './pagination.types'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    },
    {
      "path": "pagination/pagination.tsx",
      "content": "import { cn } from '@gentleduck/libs/cn'\nimport {\n  ChevronLeft,\n  ChevronLeftIcon,\n  ChevronRight,\n  ChevronRightIcon,\n  ChevronsLeftIcon,\n  ChevronsRightIcon,\n  MoreHorizontal,\n} from 'lucide-react'\nimport type * as React from 'react'\nimport { Button, buttonVariants } from '../button'\nimport type { DuckPaginationProps, PaginationLinkProps } from './pagination.types'\n\nconst Pagination = ({ className, ...props }: React.HTMLProps<HTMLHeadElement>) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn('mx-auto flex w-full justify-center', className)}\n    {...props}\n  />\n)\n\nconst PaginationContent = ({ className, ref, ...props }: React.HTMLProps<HTMLUListElement>) => (\n  <ul ref={ref} className={cn('flex flex-row items-center gap-1', className)} {...props} />\n)\n\nconst PaginationItem = ({ className, ref, ...props }: React.HTMLProps<HTMLLIElement>) => (\n  <li ref={ref} className={cn('', className)} {...props} />\n)\n\nconst PaginationLink = ({ className, isActive, size = 'icon', ref, ...props }: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? 'page' : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? 'outline' : 'ghost',\n        size,\n      }),\n      className,\n    )}\n    {...props}\n  />\n)\n\nconst PaginationPrevious = ({ className, ref, ...props }: React.ComponentPropsWithRef<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn('gap-1 pl-2.5', className)}\n    ref={ref}\n    {...props}>\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\n\nconst PaginationNext = ({ className, ref, ...props }: React.ComponentPropsWithRef<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn('gap-1 pr-2.5', className)}\n    ref={ref}\n    {...props}>\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\n\nconst PaginationEllipsis = ({ className, ref, ...props }: React.HTMLProps<HTMLSpanElement>) => (\n  <span aria-hidden className={cn('flex h-9 w-9 items-center justify-center', className)} ref={ref} {...props}>\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\n\nconst PaginationWrapper = (props: DuckPaginationProps) => {\n  const { className: wrapperClassName, ...wrapperProps } = props.wrapper ?? {}\n  const { className: contentClassName, ...contentProps } = props.content ?? {}\n  const { className: itemClassName, ...itemProps } = props.item ?? {}\n  const { className: rightClassName, ...rightProps } = props.right ?? {}\n  const { className: maxRightClassName, ...maxRightProps } = props.maxRight ?? {}\n  const { className: leftClassName, ...leftProps } = props.left ?? {}\n  const { className: maxLeftClassName, ...maxLeftProps } = props.maxLeft ?? {}\n\n  return (\n    <Pagination className={cn('justify-end', wrapperClassName)} {...wrapperProps}>\n      <PaginationContent className={cn('gap-2', contentClassName)} {...contentProps}>\n        <PaginationItem className={cn(itemClassName)} {...itemProps}>\n          <Button variant=\"outline\" size=\"sm\" className={cn('w-[32px] p-0', maxLeftClassName)} {...maxLeftProps}>\n            <ChevronsLeftIcon />\n          </Button>\n        </PaginationItem>\n        <PaginationItem className={cn(itemClassName)} {...itemProps}>\n          <Button variant=\"outline\" size=\"sm\" className={cn('w-[32px] p-0', leftClassName)} {...leftProps}>\n            <ChevronLeftIcon />\n          </Button>\n        </PaginationItem>\n        <PaginationItem className={cn(itemClassName)} {...itemProps}>\n          <Button variant=\"outline\" size=\"sm\" className={cn('w-[32px] p-0', rightClassName)} {...rightProps}>\n            <ChevronRightIcon />\n          </Button>\n        </PaginationItem>\n        <PaginationItem className={cn(itemClassName)} {...itemProps}>\n          <Button variant=\"outline\" size=\"sm\" className={cn('w-[32px] p-0', maxRightClassName)} {...maxRightProps}>\n            <ChevronsRightIcon />\n          </Button>\n        </PaginationItem>\n      </PaginationContent>\n    </Pagination>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n  PaginationWrapper,\n}\n",
      "type": "registry:ui",
      "target": "components/ui/pagination.tsx"
    },
    {
      "path": "pagination/pagination.types.ts",
      "content": "import type { Button, ButtonProps } from '../button'\nimport type { Pagination, PaginationContent, PaginationItem } from './pagination'\n\nexport interface DuckPaginationProps {\n  wrapper?: React.ComponentPropsWithoutRef<typeof Pagination>\n  content?: React.ComponentPropsWithoutRef<typeof PaginationContent>\n  item?: React.ComponentPropsWithoutRef<typeof PaginationItem>\n  right?: React.ComponentPropsWithoutRef<typeof Button>\n  maxRight?: React.ComponentPropsWithoutRef<typeof Button>\n  left?: React.ComponentPropsWithoutRef<typeof Button>\n  maxLeft?: React.ComponentPropsWithoutRef<typeof Button>\n}\n\nexport type PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, 'size'> &\n  Omit<React.HTMLProps<HTMLAnchorElement>, 'size'>\n",
      "type": "registry:ui",
      "target": "components/ui/pagination.types.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/pagination"
}