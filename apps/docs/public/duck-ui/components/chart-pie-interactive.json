{
  "name": "chart-pie-interactive",
  "type": "registry:block",
  "registryDependencies": [
    "card",
    "chart"
  ],
  "root_folder": "charts",
  "files": [
    {
      "path": "charts/chart-pie-interactive.tsx",
      "content": "'use client'\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@gentleduck/registry-ui-duckui/card'\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartStyle,\n  ChartTooltip,\n  ChartTooltipContent,\n} from '@gentleduck/registry-ui-duckui/chart'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@gentleduck/registry-ui-duckui/select'\nimport * as React from 'react'\nimport { Label, Pie, PieChart, Sector } from 'recharts'\nimport { PieSectorDataItem } from 'recharts/types/polar/Pie'\nconst desktopData = [\n  { month: 'january', desktop: 186, fill: 'var(--color-january)' },\n  { month: 'february', desktop: 305, fill: 'var(--color-february)' },\n  { month: 'march', desktop: 237, fill: 'var(--color-march)' },\n  { month: 'april', desktop: 173, fill: 'var(--color-april)' },\n  { month: 'may', desktop: 209, fill: 'var(--color-may)' },\n]\n\nconst chartConfig = {\n  visitors: {\n    label: 'Visitors',\n  },\n  desktop: {\n    label: 'Desktop',\n  },\n  mobile: {\n    label: 'Mobile',\n  },\n  january: {\n    label: 'January',\n    color: 'var(--chart-1)',\n  },\n  february: {\n    label: 'February',\n    color: 'var(--chart-2)',\n  },\n  march: {\n    label: 'March',\n    color: 'var(--chart-3)',\n  },\n  april: {\n    label: 'April',\n    color: 'var(--chart-4)',\n  },\n  may: {\n    label: 'May',\n    color: 'var(--chart-5)',\n  },\n} satisfies ChartConfig\n\nexport default function Component() {\n  const id = 'pie-interactive'\n  const [activeMonth, setActiveMonth] = React.useState(desktopData[0].month)\n\n  const activeIndex = React.useMemo(() => desktopData.findIndex((item) => item.month === activeMonth), [activeMonth])\n  const months = React.useMemo(() => desktopData.map((item) => item.month), [])\n\n  return (\n    <Card data-chart={id} className=\"flex flex-col\">\n      <ChartStyle id={id} config={chartConfig} />\n      <CardHeader className=\"flex-row items-start space-y-0 pb-0\">\n        <div className=\"grid gap-1\">\n          <CardTitle>Pie Chart - Interactive</CardTitle>\n          <CardDescription>January - June 2024</CardDescription>\n        </div>\n        <Select value={activeMonth} onValueChange={setActiveMonth}>\n          <SelectTrigger className=\"ml-auto h-7 w-[130px] rounded-lg pl-2.5\" aria-label=\"Select a value\">\n            <SelectValue placeholder=\"Select month\" />\n          </SelectTrigger>\n          <SelectContent align=\"end\" className=\"rounded-xl\">\n            {months.map((key) => {\n              const config = chartConfig[key as keyof typeof chartConfig]\n\n              if (!config) {\n                return null\n              }\n\n              return (\n                <SelectItem key={key} value={key} className=\"rounded-lg [&_span]:flex\">\n                  <div className=\"flex items-center gap-2 text-xs\">\n                    <span\n                      className=\"flex h-3 w-3 shrink-0 rounded-sm\"\n                      style={{\n                        backgroundColor: `var(--color-${key})`,\n                      }}\n                    />\n                    {config?.label}\n                  </div>\n                </SelectItem>\n              )\n            })}\n          </SelectContent>\n        </Select>\n      </CardHeader>\n      <CardContent className=\"flex flex-1 justify-center pb-0\">\n        <ChartContainer id={id} config={chartConfig} className=\"mx-auto aspect-square w-full max-w-[300px]\">\n          <PieChart>\n            <ChartTooltip cursor={false} content={<ChartTooltipContent hideLabel />} />\n            <Pie\n              data={desktopData}\n              dataKey=\"desktop\"\n              nameKey=\"month\"\n              innerRadius={60}\n              strokeWidth={5}\n              activeIndex={activeIndex}\n              activeShape={({ outerRadius = 0, ...props }: PieSectorDataItem) => (\n                <g>\n                  <Sector {...props} outerRadius={outerRadius + 10} />\n                  <Sector {...props} outerRadius={outerRadius + 25} innerRadius={outerRadius + 12} />\n                </g>\n              )}>\n              <Label\n                content={({ viewBox }) => {\n                  if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                    return (\n                      <text x={viewBox.cx} y={viewBox.cy} textAnchor=\"middle\" dominantBaseline=\"middle\">\n                        <tspan x={viewBox.cx} y={viewBox.cy} className=\"fill-foreground text-3xl font-bold\">\n                          {desktopData[activeIndex].desktop.toLocaleString()}\n                        </tspan>\n                        <tspan x={viewBox.cx} y={(viewBox.cy || 0) + 24} className=\"fill-muted-foreground\">\n                          Visitors\n                        </tspan>\n                      </text>\n                    )\n                  }\n                }}\n              />\n            </Pie>\n          </PieChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n",
      "type": "registry:block",
      "target": "components/chart-pie-interactive.tsx"
    }
  ],
  "categories": [
    "charts",
    "charts-area"
  ]
}