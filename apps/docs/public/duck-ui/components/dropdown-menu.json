{
  "name": "dropdown-menu",
  "type": "registry:ui",
  "dependencies": [
    "@gentleduck/primitives",
    "@gentleduck/libs",
    "@gentleduck/vim"
  ],
  "registryDependencies": [
    "command",
    "button",
    "popover",
    "radio-group"
  ],
  "root_folder": "dropdown-menu",
  "files": [
    {
      "path": "dropdown-menu/dropdown-menu.hooks.ts",
      "content": "import React from 'react'\nimport { DropdownMenuContext } from './dropdown-menu'\nimport { initRefs } from './dropdown-menu.libs'\n\nexport const useDropdownMenuContext = () => {\n  const context = React.useContext(DropdownMenuContext)\n  if (!context) {\n    throw new Error('useDropdownMenuContext must be used within a DropdownMenu')\n  }\n  return context\n}\n\nexport function useDropdownMenuInit(open: boolean, onOpenChange: (open: boolean) => void, sub: boolean) {\n  const triggerRef = React.useRef<HTMLButtonElement>(null)\n  const contentRef = React.useRef<HTMLDivElement>(null)\n  const wrapperRef = React.useRef<HTMLDivElement>(null)\n  const groupsRef = React.useRef<HTMLDivElement[]>([])\n  const itemsRef = React.useRef<HTMLLIElement[]>([])\n  const originalItemsRef = React.useRef<HTMLLIElement[]>([])\n  const selectedItemRef = React.useRef<HTMLLIElement | null>(null)\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      initRefs(groupsRef, contentRef, selectedItemRef, itemsRef, originalItemsRef, onOpenChange, sub)\n    }, 0)\n  }, [open])\n\n  return {\n    wrapperRef,\n    triggerRef,\n    contentRef,\n    groupsRef,\n    itemsRef,\n    originalItemsRef,\n    selectedItemRef,\n  }\n}\n",
      "type": "registry:ui",
      "target": "components/ui/dropdown-menu.hooks.ts"
    },
    {
      "path": "dropdown-menu/dropdown-menu.libs.ts",
      "content": "import type React from 'react'\nimport { dstyleItem } from '../command/command.libs'\n\nexport function initRefs(\n  groupsRef: React.RefObject<HTMLDivElement[] | null>,\n  contentRef: React.RefObject<HTMLDivElement | null>,\n  selectedItemRef: React.RefObject<HTMLLIElement | null>,\n  itemsRef: React.RefObject<HTMLLIElement[]>,\n  originalItemsRef: React.RefObject<HTMLLIElement[]>,\n  onOpenChange: (open: boolean) => void,\n  sub: boolean,\n) {\n  const groups = contentRef.current?.querySelectorAll('[duck-dropdown-menu-group]')\n  const items = contentRef.current?.querySelectorAll(\n    sub\n      ? '[duck-dropdown-menu-item]:not([duck-dropdown-menu-sub-trigger]):not([aria-disabled])'\n      : `[duck-dropdown-menu-item]:not([aria-disabled]):not([duck-dropdown-menu-sub-content] [duck-dropdown-menu-item]), [duck-dropdown-menu-sub-trigger]`,\n  ) as unknown as HTMLLIElement[]\n\n  groupsRef.current = Array.from(groups ?? []) as HTMLDivElement[]\n  itemsRef.current = Array.from(items ?? []) as HTMLLIElement[]\n  originalItemsRef.current = Array.from(items ?? []) as HTMLLIElement[]\n\n  for (let i = 0; i < itemsRef.current?.length; i++) {\n    const item = itemsRef.current[i] as HTMLLIElement\n\n    item.addEventListener('mouseenter', () => {\n      for (let i = 0; i < itemsRef.current?.length; i++) {\n        const item = itemsRef.current[i] as HTMLLIElement\n        dstyleItem(item)\n      }\n\n      item.setAttribute('aria-selected', '')\n      item.focus()\n      selectedItemRef.current = item\n    })\n\n    if (!item.hasAttribute('duck-dropdown-menu-sub-trigger')) {\n      item.addEventListener('click', () => {\n        onOpenChange(false)\n      })\n    }\n  }\n}\n",
      "type": "registry:ui",
      "target": "components/ui/dropdown-menu.libs.ts"
    },
    {
      "path": "dropdown-menu/dropdown-menu.tsx",
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport { usePopoverContext } from '@gentleduck/primitives/popover'\nimport { useKeyCommands } from '@gentleduck/vim/react'\nimport { Check, ChevronRight } from 'lucide-react'\nimport * as React from 'react'\nimport { Button } from '../button'\nimport { useHandleKeyDown } from '../command'\nimport { Popover, PopoverContent, PopoverTrigger } from '../popover'\nimport { RadioGroup, RadioGroupItem } from '../radio-group'\nimport { useDropdownMenuContext, useDropdownMenuInit } from './dropdown-menu.hooks'\nimport type {\n  DropdownMenuContextType,\n  DropdownMenuShortcutProps,\n  DropdownMenuSubContextType,\n} from './dropdown-menu.types'\n\nexport const DropdownMenuContext = React.createContext<DropdownMenuContextType | null>(null)\n\nfunction DropdownMenuImpritive({ children, className, ...props }: React.HTMLProps<HTMLDivElement>) {\n  const { open = false, setOpen: onOpenChange = () => {} } = usePopoverContext()\n  const { wrapperRef, contentRef, triggerRef, groupsRef, itemsRef, selectedItemRef, originalItemsRef } =\n    useDropdownMenuInit(open, onOpenChange, false)\n\n  useHandleKeyDown({\n    open,\n    itemsRef,\n    selectedItem: selectedItemRef.current,\n    setSelectedItem: (item) => {\n      selectedItemRef.current = item\n    },\n    originalItemsRef,\n    allowAxisArrowKeys: true,\n  })\n\n  return (\n    <DropdownMenuContext.Provider\n      value={{\n        open,\n        onOpenChange,\n        wrapperRef,\n        triggerRef: triggerRef,\n        contentRef: contentRef,\n        groupsRef,\n        itemsRef,\n        selectedItemRef,\n        originalItemsRef,\n      }}>\n      <div className={cn('relative', className)} duck-dropdown-menu=\"\" {...props} ref={wrapperRef}>\n        {children}\n      </div>\n    </DropdownMenuContext.Provider>\n  )\n}\n\nfunction DropdownMenu({ children, contextMenu, ...props }: React.ComponentPropsWithRef<typeof Popover>) {\n  return (\n    <Popover contextMenu={contextMenu} {...props}>\n      <DropdownMenuImpritive {...props}>{children}</DropdownMenuImpritive>\n    </Popover>\n  )\n}\n\nfunction DropdownMenuTrigger({\n  className,\n  children,\n  asChild,\n  onClick,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof PopoverTrigger>) {\n  const { triggerRef } = useDropdownMenuContext()\n  return (\n    <PopoverTrigger\n      ref={triggerRef as never}\n      className={cn(className)}\n      asChild={asChild}\n      {...props}\n      duck-select-trigger=\"\">\n      {children}\n    </PopoverTrigger>\n  )\n}\n\nfunction DropdownMenuContent({\n  children,\n  className,\n  renderOnce = true,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof PopoverContent> & {\n  renderOnce?: boolean\n}): React.JSX.Element {\n  const { contentRef } = useDropdownMenuContext()\n  return (\n    <PopoverContent\n      lockScroll\n      ref={contentRef}\n      duck-dropdown-menu-content=\"\"\n      className={cn('min-w-[8rem] overflow-visible p-1', className)}\n      {...props}>\n      {children}\n    </PopoverContent>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  ref,\n  inset,\n  ...props\n}: React.HTMLProps<HTMLDivElement> & { inset?: boolean }): React.JSX.Element {\n  return (\n    <div\n      ref={ref}\n      className={cn('px-2 py-1.5 font-semibold text-sm', inset && 'pl-8', className)}\n      {...props}\n      duck-dropdown-menu-label=\"\"\n    />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  disabled,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof Button> & { inset?: boolean }): React.JSX.Element {\n  return (\n    <Button\n      ref={ref}\n      variant={'ghost'}\n      size={'sm'}\n      duck-dropdown-menu-item=\"\"\n      aria-disabled={disabled}\n      disabled={disabled}\n      className={cn(\n        'h-auto w-full cursor-default justify-start px-2 focus:bg-secondary',\n        'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-transparent',\n        inset && 'pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  keys,\n  onKeysPressed,\n  ref,\n  colored = false,\n  ...props\n}: DropdownMenuShortcutProps): React.JSX.Element {\n  useKeyCommands({\n    [keys]: {\n      name: keys,\n      description: keys,\n      execute: () => onKeysPressed(),\n    },\n  })\n\n  return (\n    <kbd\n      className={cn(\n        'focus:offset-2 [&_svg]:!size-3 !font-sans pointer-events-none ml-auto inline-flex cursor-none select-none items-center gap-[2px] rounded-[4px] px-2 py-[.12rem] text-[.7rem] text-muted-foreground text-secondary-foreground text-xs tracking-widest transition-colors focus:outline-hidden focus:ring-2 focus:ring-ring',\n        colored ? 'bg-muted' : 'ltr:-mr-2 rtl:-ml-2',\n        className,\n      )}\n      duck-data-dropdown-menu-shortcut=\"\"\n      ref={ref}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({ className, ref, ...props }: React.HTMLProps<HTMLDivElement>): React.JSX.Element {\n  return (\n    <div ref={ref} className={cn('-mx-1 my-1 h-px bg-muted', className)} {...props} duck-dropdown-menu-separator=\"\" />\n  )\n}\n\nfunction DropdownMenuGroup({ className, ...props }: React.HTMLProps<HTMLDivElement>): React.JSX.Element {\n  return <div className={cn(className)} {...props} duck-dropdown-menu-group=\"\" />\n}\n\nexport const DropdownMenuSubContext = React.createContext<DropdownMenuSubContextType | null>(null)\nexport function useDropdownMenuSubContext() {\n  const context = React.useContext(DropdownMenuSubContext)\n  if (!context) {\n    throw new Error('useDropdownMenuSubContext must be used within a DropdownMenuSub')\n  }\n  return context\n}\n\nfunction DropdownMenuSubImpritive({ children, className, ...props }: React.HTMLProps<HTMLDivElement>) {\n  const { open = false, setOpen: onOpenChange = () => {} } = usePopoverContext()\n  const { wrapperRef, groupsRef, itemsRef, selectedItemRef, originalItemsRef, triggerRef, contentRef } =\n    useDropdownMenuInit(open, onOpenChange, true)\n\n  useHandleKeyDown({\n    open,\n    itemsRef,\n    selectedItem: selectedItemRef.current,\n    setSelectedItem: (item) => {\n      selectedItemRef.current = item\n    },\n    originalItemsRef,\n    allowAxisArrowKeys: true,\n  })\n\n  return (\n    <DropdownMenuSubContext.Provider\n      value={{\n        open,\n        onOpenChange,\n        wrapperRef,\n        triggerRef: triggerRef as never,\n        contentRef: contentRef as never,\n        groupsRef,\n        itemsRef,\n        selectedItemRef,\n        originalItemsRef,\n      }}>\n      <div\n        className={cn(\n          'relative focus:bg-secondary [&>button]:focus:bg-secondary [&[aria-selected]:focus-visible>button]:bg-secondary [&[aria-selected]>button]:bg-secondary',\n        )}\n        {...props}\n        duck-dropdown-menu-sub=\"\"\n        ref={wrapperRef}>\n        {children}\n      </div>\n    </DropdownMenuSubContext.Provider>\n  )\n}\n\nfunction DropdownMenuSub({\n  children,\n  contextMenu,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof Popover>): React.JSX.Element {\n  return (\n    <Popover {...props} modal enableHover contextMenu={contextMenu} placement=\"right-start\">\n      <DropdownMenuSubImpritive {...props}>{children}</DropdownMenuSubImpritive>\n    </Popover>\n  )\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  children,\n  inset = false,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof PopoverTrigger> & { inset?: boolean }) {\n  return (\n    <PopoverTrigger\n      className={cn(\n        'flex w-full items-center justify-between rounded-sm px-2 py-1.5 text-sm outline-none hover:opacity-100 [&_svg]:size-4',\n        '[&[aria-selected]]:bg-secondary',\n        '[&[data-open=\"true\"]+div]:opacity-100',\n        'data-[open=true]:bg-secondary',\n        'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-transparent',\n        inset && 'pl-8',\n        className,\n      )}\n      {...props}\n      duck-dropdown-menu-sub-trigger=\"\">\n      {children}\n      {<ChevronRight className=\"rtl:-ml-2 ltr:-mr-1 ltr:rotate-0 rtl:rotate-180\" />}\n    </PopoverTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof PopoverContent>) {\n  const { contentRef } = useDropdownMenuSubContext()\n  return (\n    <PopoverContent\n      lockScroll={true}\n      ref={contentRef}\n      className={cn('fixed z-[55] min-w-[8rem] p-1', className)}\n      {...props}\n      duck-dropdown-menu-sub-content=\"\">\n      {children}\n    </PopoverContent>\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  onClick,\n  onCheckedChange,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof Button> & { checked?: boolean; onCheckedChange?: (checked: boolean) => void }) {\n  const [checkedState, setCheckedState] = React.useState(checked ?? false)\n  return (\n    <DropdownMenuItem\n      onClick={(e) => {\n        onClick?.(e)\n        setCheckedState(!checkedState)\n        onCheckedChange?.(!checkedState)\n      }}\n      duck-dropdown-menu-checkbox-item=\"\"\n      data-checked={checkedState}\n      ref={ref}\n      className={cn(className)}\n      {...props}>\n      <span className=\"absolute left-2.5 flex items-center\">\n        <Check className={cn('!size-4 opacity-0', checkedState && 'opacity-100')} />\n      </span>\n      <span className=\"ltr:pl-7 rtl:pr-7\">{children}</span>\n    </DropdownMenuItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({ ...props }: React.ComponentPropsWithRef<typeof RadioGroup>) {\n  return <RadioGroup duck-dropdown-menu-radio-group=\"\" duck-dropdown-menu-group=\"\" {...props} />\n}\n\nfunction DropdownMenuRadioItem({ ...props }: React.ComponentPropsWithRef<typeof RadioGroupItem>) {\n  const groupItemRef = React.useRef<HTMLLIElement>(null)\n\n  return (\n    <DropdownMenuItem\n      duck-dropdown-menu-item=\"\"\n      duck-dropdown-menu-radio-item=\"\"\n      onClick={() => {\n        groupItemRef.current?.querySelector('label')?.click()\n      }}>\n      <RadioGroupItem\n        ref={groupItemRef}\n        {...props}\n        className=\"ltr:pl-[1.25rem] rtl:pr-[1.25rem]\"\n        customIndicator={\n          <span className=\"-translate-y-1/2 absolute top-1/2 flex size-2 rounded-full bg-foreground transition-all duration-150 ease-in-out ltr:left-1 rtl:right-1\" />\n        }\n      />\n    </DropdownMenuItem>\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n  DropdownMenuRadioGroup,\n}\n",
      "type": "registry:ui",
      "target": "components/ui/dropdown-menu.tsx"
    },
    {
      "path": "dropdown-menu/dropdown-menu.types.ts",
      "content": "export interface DropdownMenuShortcutProps extends React.HTMLProps<HTMLElement> {\n  colored?: boolean\n  /** The keyboard shortcut keys (e.g., \"ctrl+K\"). */\n  keys: string\n  /** Callback function that is invoked when the shortcut keys are pressed. */\n  onKeysPressed: () => void\n}\n\nexport interface DropdownMenuContextType {\n  /** Ref to the dropdown wrapper element */\n  wrapperRef: React.RefObject<HTMLDivElement | null>\n  /** Ref to the button that opens the menu */\n  triggerRef: React.RefObject<HTMLButtonElement | null>\n  /** Ref to the menu content container */\n  contentRef: React.RefObject<HTMLDivElement | null>\n  /** Refs to all group containers inside the menu */\n  groupsRef: React.RefObject<HTMLDivElement[]>\n  /** Refs to all currently visible menu items */\n  itemsRef: React.RefObject<HTMLLIElement[]>\n  /** Refs to the original unfiltered menu items */\n  originalItemsRef: React.RefObject<HTMLLIElement[]>\n  /** Ref to the currently selected/focused item */\n  selectedItemRef: React.RefObject<HTMLLIElement | null>\n  /** Whether the menu is currently open */\n  open: boolean\n  /** Callback function that is invoked when the menu is opened or closed */\n  onOpenChange: (open: boolean) => void\n}\n\nexport type DropdownMenuSubContextType = DropdownMenuContextType\n",
      "type": "registry:ui",
      "target": "components/ui/dropdown-menu.types.ts"
    },
    {
      "path": "dropdown-menu/index.ts",
      "content": "export * from './dropdown-menu'\nexport * from './dropdown-menu.hooks'\nexport * from './dropdown-menu.libs'\nexport * from './dropdown-menu.types'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/dropdown-menu"
}