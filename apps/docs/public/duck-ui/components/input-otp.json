{
  "name": "input-otp",
  "type": "registry:ui",
  "dependencies": [
    "@gentleduck/libs"
  ],
  "root_folder": "input-otp",
  "files": [
    {
      "path": "input-otp/index.ts",
      "content": "export * from './input-otp'\nexport * from './input-otp.hooks'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    },
    {
      "path": "input-otp/input-otp.hooks.ts",
      "content": "import React from 'react'\nimport { OTPInputContext } from './input-otp'\n\nexport function useOTPInputContext() {\n  const context = React.useContext(OTPInputContext)\n  if (context === null) {\n    throw new Error('useOTPInputContext must be used within a OTPInputProvider')\n  }\n  return context\n}\nexport function useInputOTPInit(\n  value?: string,\n  onValueChange?: (value: string) => void,\n  pattern: RegExp = /^[\\w\\d\\p{P}\\p{S}]$/u, // default if not provided\n) {\n  const inputsRef = React.useRef<HTMLInputElement[]>([])\n  const wrapperRef = React.useRef<HTMLDivElement>(null)\n\n  React.useEffect(() => {\n    const html = document.documentElement\n    const inputs = Array.from(\n      wrapperRef?.current?.querySelectorAll('input[duck-input-otp-slot]') as never as HTMLInputElement[],\n    )\n    const valueChunks = value?.split('')\n    inputsRef.current = inputs\n\n    for (let i = 0; i < inputsRef.current.length; i++) {\n      const item = inputsRef.current[i] as HTMLInputElement\n      item.value = valueChunks?.[i] ?? ''\n      item.setAttribute('aria-label', `Digit ${i + 1}`)\n\n      item.addEventListener('keydown', (e) => {\n        // navigation keys\n        if (\n          e.key === 'Backspace' ||\n          (e.key === 'ArrowLeft' && html.getAttribute('dir') === 'ltr') ||\n          (e.key === 'ArrowRight' && html.getAttribute('dir') === 'rtl')\n        ) {\n          setTimeout(() => inputs[i - 1]?.focus(), 0)\n        }\n\n        if (\n          (e.key === 'ArrowLeft' && html.getAttribute('dir') === 'rtl') ||\n          (e.key === 'ArrowRight' && (html.getAttribute('dir') === 'ltr' || html.getAttribute('dir') === null))\n        ) {\n          setTimeout(() => inputs[i + 1]?.focus(), 0)\n        }\n\n        // skip special keys\n        if (\n          e.metaKey ||\n          e.ctrlKey ||\n          e.altKey ||\n          ['ArrowLeft', 'ArrowRight', 'Backspace', 'Enter', 'Tab', 'ArrowUp', 'ArrowDown'].includes(e.key)\n        ) {\n          return\n        }\n\n        // validate input with pattern\n        if (!pattern.test(e.key)) {\n          e.preventDefault()\n          return\n        }\n\n        item.value = e.key\n        setTimeout(() => inputs[i + 1]?.focus(), 0)\n        onValueChange?.(inputs.map((input) => input.value).join(''))\n      })\n    }\n  }, [inputsRef, pattern])\n\n  return { inputsRef, wrapperRef }\n}\n",
      "type": "registry:ui",
      "target": "components/ui/input-otp.hooks.ts"
    },
    {
      "path": "input-otp/input-otp.tsx",
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport { Dot } from 'lucide-react'\nimport * as React from 'react'\nimport { useInputOTPInit } from './input-otp.hooks'\n\nexport const REGEXP_ONLY_DIGITS_AND_CHARS = /^[\\w\\d\\p{P}\\p{S}]$/u\nexport const REGEXP_ONLY_DIGITS = /^[0-9]$/\nexport const OTPInputContext = React.createContext<{\n  value?: string\n  wrapperRef: React.RefObject<HTMLDivElement | null>\n  inputsRef: React.RefObject<HTMLInputElement[]>\n} | null>(null)\n\nfunction InputOTP({\n  className,\n  children,\n  value,\n  onValueChange,\n  pattern,\n  ref,\n  'aria-label': ariaLabel = 'One-time password input',\n  ...props\n}: Omit<React.HTMLProps<HTMLDivElement>, 'pattern'> & {\n  value?: string\n  onValueChange?: (value: string) => void\n  pattern?: RegExp\n}) {\n  const { inputsRef, wrapperRef } = useInputOTPInit(value, onValueChange, pattern)\n\n  return (\n    <OTPInputContext.Provider\n      value={{\n        value,\n        wrapperRef,\n        inputsRef,\n      }}>\n      <div\n        ref={wrapperRef}\n        className={cn('flex items-center gap-2 disabled:cursor-not-allowed has-[:disabled]:opacity-50', className)}\n        role=\"group\"\n        aria-label={ariaLabel}\n        {...props}\n        duck-input-otp=\"\">\n        {children}\n      </div>\n    </OTPInputContext.Provider>\n  )\n}\n\nconst InputOTPGroup = ({ className, ref, ...props }: React.ComponentPropsWithRef<'div'>) => {\n  return (\n    <div\n      ref={ref}\n      className={cn('flex items-center', className)}\n      role=\"group\"\n      aria-label=\"OTP group\"\n      {...props}\n      duck-input-otp-group=\"\"\n    />\n  )\n}\n\nconst InputOTPSlot = ({ className, ref, ...props }: React.ComponentPropsWithRef<'input'>) => {\n  return (\n    <input\n      ref={ref}\n      className={cn(\n        'relative h-10 w-10 border-input border-y border-r text-center text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n        className,\n      )}\n      aria-required=\"true\"\n      aria-invalid=\"false\"\n      maxLength={1}\n      duck-input-otp-slot=\"\"\n      {...props}\n    />\n  )\n}\n\nconst InputOTPSeparator = ({\n  ref,\n  customIndicator,\n  ...props\n}: React.ComponentPropsWithRef<'div'> & {\n  customIndicator?: React.ReactNode\n}) => {\n  return (\n    <div ref={ref} role=\"presentation\" aria-hidden=\"true\" {...props} duck-input-otp-separator=\"\">\n      {customIndicator ? customIndicator : <Dot />}\n    </div>\n  )\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
      "type": "registry:ui",
      "target": "components/ui/input-otp.tsx"
    }
  ],
  "source": "/registry-ui-duckui/src/input-otp"
}