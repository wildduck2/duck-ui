{
  "name": "context-menu",
  "type": "registry:ui",
  "dependencies": [
    "@gentleduck/libs"
  ],
  "registryDependencies": [
    "dropdown-menu"
  ],
  "root_folder": "context-menu",
  "files": [
    {
      "path": "context-menu/context-menu.tsx",
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport * as React from 'react'\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n  useDropdownMenuContext,\n} from '../dropdown-menu'\n\nfunction ContextMenu(props: React.ComponentPropsWithoutRef<typeof DropdownMenu>) {\n  return <DropdownMenu contextMenu {...props} duck-context-menu=\"\" />\n}\n\nfunction ContextMenuTrigger(props: React.ComponentPropsWithoutRef<typeof DropdownMenuTrigger>) {\n  const { triggerRef, open, onOpenChange } = useDropdownMenuContext()\n\n  React.useLayoutEffect(() => {\n    triggerRef.current?.addEventListener('click', (e) => {\n      e.preventDefault()\n    })\n\n    triggerRef.current?.addEventListener('contextmenu', (e) => {\n      e.preventDefault()\n      if (open) return\n\n      const trigger = triggerRef.current\n      const content = trigger?.nextSibling as HTMLDivElement\n      if (!trigger || !content) return\n\n      const mouseX = e.clientX\n      const mouseY = e.clientY\n\n      const viewportWidth = window.innerWidth\n      const viewportHeight = window.innerHeight\n\n      let left = mouseX + 4\n      let top = mouseY + 4\n\n      if (mouseX > viewportWidth * 0.5) {\n        left = mouseX - 210\n      }\n\n      if (mouseY > viewportHeight * 0.6) {\n        top = mouseY - 310\n      }\n\n      content.style.transform = 'translate(0,0)'\n      content.style.left = `${left}px`\n      content.style.top = `${top}px`\n      content.style.zIndex = '9999'\n      setTimeout(() => {\n        onOpenChange(true)\n      }, 100)\n    })\n  }, [])\n\n  return (\n    <DropdownMenuTrigger\n      {...props}\n      duck-context-menu-trigger=\"\"\n      className={cn(\n        'h-[200px] w-[300px] justify-center border-dashed bg-background p-2 hover:bg-background',\n        props.className,\n      )}\n    />\n  )\n}\n\nfunction ContextMenuGroup(props: React.ComponentPropsWithoutRef<typeof DropdownMenuGroup>) {\n  return <DropdownMenuGroup {...props} duck-context-menu-group=\"\" />\n}\n\nfunction ContextMenuSub(props: React.ComponentPropsWithoutRef<typeof DropdownMenuSub>) {\n  return <DropdownMenuSub {...props} duck-context-menu-sub=\"\" />\n}\n\nfunction ContextMenuRadioGroup(props: React.ComponentPropsWithoutRef<typeof DropdownMenuRadioGroup>) {\n  return <DropdownMenuRadioGroup {...props} duck-context-menu-radio-group=\"\" />\n}\n\nfunction ContextMenuSubTrigger(props: React.ComponentPropsWithoutRef<typeof DropdownMenuSubTrigger>) {\n  return <DropdownMenuSubTrigger {...props} duck-context-menu-sub-trigger=\"\" />\n}\n\nfunction ContextMenuSubContent(props: React.ComponentPropsWithoutRef<typeof DropdownMenuSubContent>) {\n  return <DropdownMenuSubContent {...props} duck-context-menu-sub-content=\"\" />\n}\n\nfunction ContextMenuContent(props: React.ComponentPropsWithoutRef<typeof DropdownMenuContent>) {\n  return <DropdownMenuContent {...props} className={cn('fixed', props.className)} duck-context-menu-content=\"\" />\n}\n\nfunction ContextMenuItem(props: React.ComponentPropsWithoutRef<typeof DropdownMenuItem>) {\n  return <DropdownMenuItem {...props} duck-context-menu-item=\"\" />\n}\n\nfunction ContextMenuCheckboxItem(props: React.ComponentPropsWithoutRef<typeof DropdownMenuCheckboxItem>) {\n  return <DropdownMenuCheckboxItem {...props} duck-context-menu-checkbox-item=\"\" />\n}\n\nfunction ContextMenuRadioItem(props: React.ComponentPropsWithoutRef<typeof DropdownMenuRadioItem>) {\n  return <DropdownMenuRadioItem {...props} duck-context-menu-radio-item=\"\" />\n}\n\nfunction ContextMenuLabel(props: React.ComponentPropsWithoutRef<typeof DropdownMenuLabel>) {\n  return <DropdownMenuLabel {...props} duck-context-menu-label=\"\" />\n}\n\nfunction ContextMenuSeparator(props: React.ComponentPropsWithoutRef<typeof DropdownMenuSeparator>) {\n  return <DropdownMenuSeparator {...props} duck-context-menu-separator=\"\" />\n}\n\nfunction ContextMenuShortcut(props: React.ComponentPropsWithoutRef<typeof DropdownMenuShortcut>) {\n  return <DropdownMenuShortcut {...props} duck-context-menu-shortcut=\"\" />\n}\n\n// /////////////\n//\n// type DropdownMenuOptionsDataType<T, Y extends boolean = true> = {\n//   command?: React.ComponentPropsWithoutRef<typeof ContextMenuShortcut> & CommandType\n//   nestedData?: Y extends true\n//     ? Partial<React.ComponentPropsWithoutRef<typeof ContextMenuSubContent> & ContextMenuOptionsType<T>>\n//     : never\n// } & Partial<Omit<ButtonProps, 'command'>> &\n//   Partial<React.ComponentPropsWithoutRef<typeof ContextMenuCheckboxItem>> &\n//   Partial<React.ComponentPropsWithoutRef<typeof ContextMenuItem>> &\n//   Partial<React.ComponentPropsWithoutRef<typeof ContextMenuRadioItem>>\n//\n// interface ContextMenuOptionsType<T> {\n//   itemType?: 'checkbox' | 'radio' | 'label'\n//   actionsArgs?: T extends {} ? T : never\n//   optionsData?: DropdownMenuOptionsDataType<T>[]\n//   group?: number[]\n// }\n//\n// export type ContextContent<T> = Partial<{\n//   label?: React.ComponentPropsWithoutRef<typeof ContextMenuLabel>\n//   options?: ContextMenuOptionsType<T>\n// }> //& React.ComponentPropsWithoutRef<typeof ContextMenuContent>\n//\n// export interface DuckContextMenuProps<T> {\n//   wrapper?: Partial<React.ComponentPropsWithoutRef<typeof ContextMenu>>\n//   content?: ContextContent<T>\n//   trigger?: React.ComponentPropsWithoutRef<typeof ContextMenuTrigger> & ButtonProps\n// }\n//\n// export const DuckContextMenu = <T,>({ content, trigger, wrapper }: DuckContextMenuProps<T>) => {\n//   const { className: triggerClassName, icon: Icon, children: triggerChildren, ...triggerProps } = trigger ?? {}\n//   const {\n//     // /className: optionsClassName,\n//     options,\n//     ...contentProps\n//   } = content ?? {}\n//   const groupedOption = groupArrays(options?.group ?? [options?.optionsData?.length || 1], options?.optionsData ?? [])\n//   const {} = wrapper ?? {}\n//\n//   return (\n//     <ContextMenu>\n//       <ContextMenuTrigger asChild>\n//         {triggerChildren ? (\n//           triggerChildren\n//         ) : (\n//           <Button variant=\"outline\" size=\"sm\" className={cn(triggerClassName)} icon={Icon} {...triggerProps} />\n//         )}\n//       </ContextMenuTrigger>\n//       {options?.optionsData?.length ? (\n//         <ContextMenuContent\n//           className={cn(\n//             'w-[200px]',\n//             // optionsClassName\n//           )}\n//           {...contentProps}>\n//           {groupedOption.map((group, idx) => {\n//             return (\n//               <React.Fragment key={`group - ${ idx }`}>\n//                 {group.map((item, idx) => {\n//                   const { children, className, value, nestedData, ...props } = item\n//                   const {\n//                     className: commandClassName,\n//                     label: commandLabel,\n//                     action: commandAction,\n//                     ...commandProps\n//                   } = item.command ?? {}\n//                   const groupedNestedOption =\n//                     groupArrays(\n//                       nestedData?.group ?? [nestedData?.optionsData?.length || 1],\n//                       nestedData?.optionsData ?? [],\n//                     ) ?? []\n//                   const {\n//                     className: nestedClassName,\n//                     group: nestedGroup,\n//                     optionsData: nestedOptions,\n//                     ...nestedProps\n//                   } = nestedData ?? {}\n//\n//                   const Component =\n//                     options?.itemType === 'checkbox'\n//                       ? ContextMenuCheckboxItem\n//                       : options?.itemType === 'radio'\n//                         ? ContextMenuRadioItem\n//                         : ContextMenuItem\n//\n//                   return (\n//                     <React.Fragment key={`item - ${ idx }`}>\n//                       {nestedData?.optionsData?.length ? (\n//                         <ContextMenuSub key={`sub - item - ${ idx }`}>\n//                           <ContextMenuSubTrigger className={cn('flex item-center gap-2')}>\n//                             {children}\n//                           </ContextMenuSubTrigger>\n//                           <ContextMenuPortal>\n//                             <ContextMenuSubContent className={cn('w-[200px]', nestedClassName)} {...nestedProps}>\n//                               {groupedNestedOption?.map((nestedItem, idx) => {\n//                                 return (\n//                                   <React.Fragment key={`nested - ${ idx }`}>\n//                                     {nestedItem.map((nestedItemInner, idx) => {\n//                                       const {\n//                                         children: nestedChildren,\n//                                         value,\n//                                         className: nestedClassName,\n//                                         ...nestedProps\n//                                       } = nestedItemInner\n//                                       // const {\n//                                       //   children: NestedIcon,\n//                                       //   className: nestedIconClassName,\n//                                       //   ...nestedIconProps\n//                                       // } = nestedItemInner.icon ?? {}\n//                                       const {\n//                                         className: nestedCommandClassName,\n//                                         label: enstedCommandLabel,\n//                                         action: nestedCommandAction,\n//                                         ...nestedCommandProps\n//                                       } = nestedItemInner.command ?? {}\n//\n//                                       const NestedComponent =\n//                                         nestedData.itemType === 'checkbox'\n//                                           ? ContextMenuCheckboxItem\n//                                           : nestedData.itemType === 'radio'\n//                                             ? ContextMenuRadioItem\n//                                             : ContextMenuItem\n//\n//                                       return (\n//                                         <NestedComponent\n//                                           value={value as string}\n//                                           key={`nested - item - ${ idx }`}\n//                                           className={cn('flex gap-2 items-center', nestedClassName)}\n//                                           {...nestedProps}>\n//                                           {nestedItemInner.icon && nestedItemInner.icon}\n//                                           {nestedChildren}\n//                                           {nestedItemInner.command && (\n//                                             <>\n//                                               <ContextMenuShortcut\n//                                                 children={enstedCommandLabel}\n//                                                 {...nestedCommandProps}\n//                                                 key={`nested - item - shortcut - ${ idx }`}\n//                                               />\n//                                               <Button command={nestedItemInner.command} className=\"sr-only hidden\" />\n//                                             </>\n//                                           )}\n//                                         </NestedComponent>\n//                                       )\n//                                     })}\n//                                     {idx !== groupedNestedOption?.length - 1 && (\n//                                       <ContextMenuSeparator key={`separator - ${ idx }`} />\n//                                     )}\n//                                   </React.Fragment>\n//                                 )\n//                               })}\n//                             </ContextMenuSubContent>\n//                           </ContextMenuPortal>\n//                         </ContextMenuSub>\n//                       ) : (\n//                         <Component\n//                           value={value as string}\n//                           className={cn('flex gap-2 items-center', className)}\n//                           {...props}>\n//                           {item.icon && item.icon}\n//                           {children}\n//                           {item.command && (\n//                             <>\n//                               <ContextMenuShortcut children={commandLabel} {...commandProps} key={`command - ${ idx }`} />\n//                               <Button command={item.command} className=\"sr-only hidden\" />\n//                             </>\n//                           )}\n//                         </Component>\n//                       )}\n//                     </React.Fragment>\n//                   )\n//                 })}\n//                 {idx !== groupedOption.length - 1 && <ContextMenuSeparator />}\n//               </React.Fragment>\n//             )\n//           })}\n//         </ContextMenuContent>\n//       ) : null}\n//     </ContextMenu>\n//   )\n// }\n//\n// DuckContextMenu.displayName = 'ContextCustomGroup'\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
      "type": "registry:ui",
      "target": "components/ui/context-menu.tsx"
    },
    {
      "path": "context-menu/index.ts",
      "content": "export * from './context-menu'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/context-menu"
}