{
  "name": "sonner",
  "type": "registry:ui",
  "dependencies": [
    "sonner",
    "next-themes",
    "@gentleduck/libs"
  ],
  "registryDependencies": [
    "button",
    "progress"
  ],
  "root_folder": "sonner",
  "files": [
    {
      "path": "sonner/index.ts",
      "content": "export * from './sonner'\nexport * from './sonner.libs'\nexport * from './sonner.types'\nexport * from './sonner.chunks'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    },
    {
      "path": "sonner/sonner.chunks.tsx",
      "content": "import { cn } from '@gentleduck/libs/cn'\nimport { CircleCheck, Loader } from 'lucide-react'\nimport type React from 'react'\nimport { toast } from 'sonner'\nimport { Button } from '../button'\nimport { Progress } from '../progress'\nimport { formatTime } from './sonner.libs'\nimport type { UploadSonnerProps } from './sonner.types'\n\nconst SonnerUpload = ({\n  progress,\n  attachments,\n  remainingTime,\n  onCancel,\n  onComplete,\n}: UploadSonnerProps): React.JSX.Element => {\n  return (\n    <div className=\"flex w-full gap-3\">\n      <CircleCheck\n        className={cn(\n          '!size-[18px] mt-2 hidden fill-primary [&_path]:stroke-primary-foreground',\n          progress >= 100 && 'flex',\n        )}\n      />\n      <Loader\n        className={cn(\n          '!size-[18px] mt-2 hidden animate-spin text-foreground-muted opacity-70',\n          progress < 100 && 'flex',\n        )}\n      />\n      <div className=\"flex w-full flex-col gap-2\">\n        <div className=\"flex w-full justify-between\">\n          <p className=\"text-foreground text-sm\">\n            {progress >= 100\n              ? `Upload complete`\n              : attachments\n                ? `Uploading ${attachments} file${attachments > 1 ? 's' : ''}...`\n                : `Uploading...`}\n          </p>\n          <div className=\"flex items-center gap-2\">\n            {progress <= 100 && (\n              <p className=\"font-mono text-foreground-light text-sm\">{`${remainingTime && !isNaN(remainingTime) && isFinite(remainingTime) && remainingTime !== 0 ? `${formatTime(remainingTime)} remaining â€“ ` : ''}`}</p>\n            )}\n            <p className=\"font-mono text-foreground-light text-sm\">{`${progress}%`}</p>\n          </div>\n        </div>\n        <Progress value={progress} className=\"h-1 w-full\" />\n        <div className=\"flex w-full items-center justify-between gap-2\">\n          <small className=\"w-full text-foreground-muted text-xs\">\n            {progress < 100 ? 'Please do not close the browser until completed' : 'Upload complete'}\n          </small>\n\n          {progress === 100 && (\n            <Button\n              variant=\"default\"\n              size=\"xs\"\n              border=\"default\"\n              onClick={(_) => onComplete?.(_, (id: string) => toast.dismiss(id))}>\n              Complete\n            </Button>\n          )}\n\n          {progress < 100 && (\n            <Button\n              variant=\"default\"\n              size=\"xs\"\n              border=\"default\"\n              onClick={(_) => onCancel?.(_, (id: string) => toast.dismiss(id))}>\n              Cancel\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport { SonnerUpload }\n",
      "type": "registry:ui",
      "target": "components/ui/sonner.chunks.tsx"
    },
    {
      "path": "sonner/sonner.libs.ts",
      "content": "export function formatTime(seconds: number) {\n  const days = Math.floor(seconds / (24 * 3600))\n  seconds %= 24 * 3600\n  const hours = Math.floor(seconds / 3600)\n  seconds %= 3600\n  const minutes = Math.floor(seconds / 60)\n  seconds = Math.floor(seconds % 60)\n\n  if (days > 0) return `${days}d `\n  if (hours > 0) return `${hours}h `\n  if (minutes > 0) return `${minutes}m `\n  return `${seconds}s`\n}\n",
      "type": "registry:ui",
      "target": "components/ui/sonner.libs.ts"
    },
    {
      "path": "sonner/sonner.tsx",
      "content": "'use client'\n\nimport { useTheme } from 'next-themes'\nimport { Toaster as Sonner, type ToasterProps } from 'sonner'\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = 'system' } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps['theme']}\n      className=\"toaster group [&_li>div]:w-full\"\n      style={\n        {\n          '--normal-bg': 'var(--popover)',\n          '--normal-text': 'var(--popover-foreground)',\n          '--normal-border': 'var(--border)',\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n",
      "type": "registry:ui",
      "target": "components/ui/sonner.tsx"
    },
    {
      "path": "sonner/sonner.types.ts",
      "content": "import type { Toaster as Sonner } from 'sonner'\nexport type ToasterProps = React.ComponentProps<typeof Sonner>\nexport type UploadSonnerProps = {\n  progress: number\n  attachments: number\n  remainingTime?: number\n  onCancel?: (_e: React.MouseEvent<HTMLButtonElement>, onCancel: (_id: string) => void) => void\n  onComplete?: (_e: React.MouseEvent<HTMLButtonElement>, onComplete: (_id: string) => void) => void\n}\n",
      "type": "registry:ui",
      "target": "components/ui/sonner.types.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/sonner"
}