{
  "name": "accordion",
  "type": "registry:ui",
  "dependencies": [
    "@gentleduck/primitives",
    "@gentledduck/motion",
    "@gentleduck/libs"
  ],
  "root_folder": "accordion",
  "files": [
    {
      "path": "accordion/accordion.tsx",
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport { AnimVariants } from '@gentleduck/motion/anim'\nimport { Mount } from '@gentleduck/primitives/mount'\nimport { ChevronDown } from 'lucide-react'\nimport * as React from 'react'\n\nconst AccordionContext = React.createContext<{\n  value?: string[]\n  readonly onValueChange?: (value: string | string[]) => void\n  readonly wrapperRef: React.RefObject<HTMLDivElement | null>\n  readonly onItemChange: (\n    value: string,\n    setOpen: React.Dispatch<React.SetStateAction<boolean>>,\n    e: React.MouseEvent<HTMLDetailsElement, MouseEvent>,\n  ) => void\n  readonly rerender: boolean\n} | null>(null)\n\ntype AccordionProps = Omit<React.HTMLProps<HTMLDivElement>, 'value' | 'type'> & {\n  rerender?: boolean\n} & (\n    | {\n        type?: 'single'\n        defaultValue?: string\n        value?: string\n        onValueChange?: (value: string) => void\n        collapsible?: boolean\n      }\n    | {\n        type?: 'multiple'\n        defaultValue?: string[]\n        onValueChange?: (value: string[]) => void\n        value?: string[]\n        collapsible?: never\n      }\n  )\nfunction Accordion({\n  className,\n  children,\n  defaultValue,\n  ref,\n  type = 'single',\n  value,\n  collapsible = true,\n  rerender = false,\n  onValueChange,\n  ...props\n}: AccordionProps) {\n  const wrapperRef = React.useRef<HTMLDivElement | null>(null)\n  const itemsRef = React.useRef<HTMLDetailsElement[]>([])\n\n  React.useEffect(() => {\n    itemsRef.current = Array.from(\n      wrapperRef.current?.querySelectorAll('[duck-accordion-item]') as never as HTMLDetailsElement[],\n    )\n  }, [])\n\n  React.useEffect(() => {\n    if (defaultValue) {\n      itemsRef.current.forEach((item) => {\n        if (defaultValue.includes(item.id)) {\n          item.open = true\n        }\n      })\n    }\n  }, [defaultValue, onValueChange])\n\n  function handleAccordionItemChange(\n    value: string,\n    setOpen: React.Dispatch<React.SetStateAction<boolean>>,\n    e: React.MouseEvent<HTMLDetailsElement, MouseEvent>,\n  ) {\n    if (type === 'single') {\n      if (collapsible) {\n        itemsRef.current.forEach((item) => {\n          if (item.id !== value) {\n            item.open = false\n          }\n        })\n      } else {\n        itemsRef.current.forEach((item) => {\n          if (item.id === value) {\n            item.open = true\n            e.preventDefault()\n          } else {\n            item.open = false\n          }\n        })\n      }\n    } else if (type === 'multiple') {\n      itemsRef.current.forEach((item) => {\n        if (item.id === value) {\n          item.open = !item.open\n          e.preventDefault()\n        }\n      })\n    }\n    if (rerender) {\n      setOpen((x) => !x)\n    }\n  }\n\n  return (\n    <AccordionContext.Provider\n      value={{\n        rerender,\n        onValueChange: onValueChange as never,\n        onItemChange: handleAccordionItemChange,\n        value: (type === 'single' ? [value ?? defaultValue] : (value ?? defaultValue)) as string[],\n        wrapperRef,\n      }}>\n      <div className={cn('min-w-[400px] [interpolate-size:allow-keywords]', className)} {...props} ref={wrapperRef}>\n        {children}\n      </div>\n    </AccordionContext.Provider>\n  )\n}\n\nfunction AccordionItem({\n  className,\n  ref,\n  children,\n  onClick,\n  onKeyUp,\n\n  renderOnce = false,\n  value,\n  ...props\n}: Omit<React.HTMLProps<HTMLDetailsElement>, 'value'> & {\n  renderOnce?: boolean\n  value?: string\n}) {\n  const { onItemChange, value: _value, rerender } = React.useContext(AccordionContext) ?? {}\n  const [open, setOpen] = React.useState<boolean>(_value?.includes(value as string) ?? false)\n  const _children = Array.from(children as never as React.ReactNode[])\n\n  return (\n    <details\n      aria-labelledby={value}\n      className={cn(\n        'group overflow-hidden border-border border-b',\n        '[&::details-content]:h-0 [&::details-content]:transform-gpu [&::details-content]:transition-all [&::details-content]:transition-discrete [&::details-content]:duration-250 [&::details-content]:ease-(--duck-motion-ease) [&::details-content]:will-change-[height] open:[&::details-content]:h-auto',\n        AnimVariants({ overlay: 'nothing' }),\n        className,\n      )}\n      id={value}\n      ref={ref}\n      onKeyUp={onKeyUp}\n      onClick={(e) => {\n        onClick?.(e)\n        onItemChange?.(value ?? '', setOpen, e)\n      }}\n      {...props}\n      duck-accordion-item=\"\">\n      {_children[0]}\n      {rerender && (\n        <Mount renderOnce={renderOnce} open={open}>\n          {_children[1]}\n        </Mount>\n      )}\n      {!rerender && _children[1]}\n    </details>\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  icon,\n  value,\n  ref,\n  ...props\n}: React.HTMLProps<HTMLElement> & {\n  icon?: React.ReactNode\n  value?: string\n}) {\n  return (\n    <summary\n      aria-controls={value}\n      aria-describedby={value}\n      className={cn(\n        'flex flex-1 cursor-pointer select-none items-center justify-between whitespace-nowrap py-4 font-medium font-medium text-base ring-offset-background transition-all transition-colors hover:underline focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        className,\n      )}\n      id={value}\n      ref={ref}\n      {...props}\n      duck-accordion-trigger=\"\">\n      {children}\n      <span\n        className={cn(\n          '[&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:transition-transform [&>svg]:duration-200 group-open:[&>svg]:rotate-180',\n        )}\n        duck-accordion-icon=\"\">\n        {icon ? icon : <ChevronDown id=\"arrow\" />}\n      </span>\n    </summary>\n  )\n}\n\nconst AccordionContent = ({\n  className,\n  children,\n  rerender = false,\n  ref,\n  ...props\n}: React.HTMLProps<HTMLDivElement> & { rerender?: boolean }) => {\n  return (\n    <div\n      className={cn('select-none overflow-hidden pt-0 pb-4 text-base', className)}\n      duck-accordion-content=\"\"\n      ref={ref}\n      {...props}>\n      {children}\n    </div>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "type": "registry:ui",
      "target": "components/ui/accordion.tsx"
    },
    {
      "path": "accordion/index.ts",
      "content": "export * from './accordion'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/accordion"
}