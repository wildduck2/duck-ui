{
  "name": "checkbox",
  "type": "registry:ui",
  "dependencies": [
    "@gentleduck/primitives",
    "@gentleduck/motion",
    "@gentleduck/libs"
  ],
  "registryDependencies": [
    "label"
  ],
  "root_folder": "checkbox",
  "files": [
    {
      "path": "checkbox/checkbox.tsx",
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport { AnimVariants, checkersStylePattern } from '@gentleduck/motion/anim'\nimport { useSvgIndicator } from '@gentleduck/primitives/checkers'\nimport * as React from 'react'\nimport { Label } from '../label'\nimport { CheckboxGroupProps, CheckboxProps, CheckboxWithLabelProps, CheckedState } from './checkbox.types'\n\nconst Checkbox = ({\n  className,\n  indicator,\n  checkedIndicator,\n  style,\n  checked: controlledChecked,\n  defaultChecked = false,\n  onCheckedChange,\n  ref,\n  ...props\n}: CheckboxProps) => {\n  const { indicatorReady, checkedIndicatorReady, inputStyle, SvgIndicator } = useSvgIndicator({\n    indicator,\n    checkedIndicator,\n  })\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  const isControlled = controlledChecked !== undefined\n  const checked = isControlled ? controlledChecked : defaultChecked\n\n  const handleChange = (next: CheckedState) => {\n    onCheckedChange?.(next)\n  }\n\n  React.useEffect(() => {\n    if (ref && typeof ref !== 'function' && checked === 'indeterminate' && ref.current) {\n      ref.current.indeterminate = true\n      changeCheckedState(checked, ref.current)\n    }\n    changeCheckedState(checked, inputRef.current!)\n  }, [checked, ref])\n\n  function changeCheckedState(state: CheckedState, input: HTMLInputElement) {\n    input.setAttribute('aria-checked', `${state}`)\n    input.setAttribute('data-checked', `${state}`)\n    input.checked = state as boolean\n  }\n\n  return (\n    <>\n      <input\n        ref={ref ?? inputRef}\n        type=\"checkbox\"\n        style={{ ...style, ...inputStyle }}\n        onChange={(e) => {\n          const nextChecked = e.target.checked ? true : e.target.indeterminate ? 'indeterminate' : false\n          e.target.indeterminate = false\n          changeCheckedState(nextChecked, e.target)\n          handleChange(nextChecked)\n        }}\n        className={cn(\n          checkersStylePattern({\n            type: 'checkbox',\n            indicatorState:\n              indicatorReady && checkedIndicatorReady\n                ? 'both'\n                : indicatorReady\n                  ? 'indicatorReady'\n                  : checkedIndicatorReady\n                    ? 'checkedIndicatorReady'\n                    : 'default',\n          }),\n          AnimVariants({ overlay: 'nothing', pseudo: 'animate' }),\n          (indicatorReady && checkedIndicatorReady) || indicatorReady\n            ? ''\n            : 'after:mb-0.5 after:h-[9px] after:w-[4px] after:rotate-45 after:border-[1.5px] after:border-t-0 after:border-l-0 after:bg-transparent',\n          'data-[checked=\"indeterminate\"]:border-border data-[checked=\"indeterminate\"]:bg-transparent data-[checked=\"indeterminate\"]:text-foreground',\n          'bg-transparent',\n          className,\n        )}\n        {...props}\n      />\n      <SvgIndicator className=\"sr-only\" />\n    </>\n  )\n}\n\nconst CheckboxWithLabel = ({ id, _checkbox, _label, className, ref, ...props }: CheckboxWithLabelProps) => {\n  const { className: labelClassName, ...labelProps } = _label\n  return (\n    <div ref={ref} className={cn('flex items-center justify-start gap-2', className)} {...props}>\n      <Checkbox id={id} {..._checkbox} />\n      <Label htmlFor={id} className={cn('cursor-pointer', labelClassName)} {...labelProps} />\n    </div>\n  )\n}\n\nconst CheckboxGroup = ({ subtasks, subtasks_default_values, ref, ...props }: CheckboxGroupProps) => {\n  const { _checkbox, _label } = subtasks_default_values || {}\n  return (\n    <div className={cn('mb-3 flex flex-col gap-2')} {...props} ref={ref}>\n      {subtasks.map(({ id, title, checked }) => (\n        <CheckboxWithLabel\n          key={id}\n          id={id}\n          _checkbox={{\n            ..._checkbox,\n            checked,\n            className: 'w-4 h-4 rounded-full border-muted-foreground/80',\n          }}\n          _label={{ ..._label, children: title }}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport { Checkbox, CheckboxGroup, CheckboxWithLabel }\n",
      "type": "registry:ui",
      "target": "components/ui/checkbox.tsx"
    },
    {
      "path": "checkbox/checkbox.types.ts",
      "content": "import { Label } from '../label'\nimport { Checkbox } from './checkbox'\n\nexport type CheckedState = boolean | 'indeterminate'\n\nexport interface CheckboxProps\n  extends Omit<React.HTMLProps<HTMLInputElement>, 'checked' | 'onChange' | 'defaultChecked'> {\n  indicator?: React.ReactElement\n  checkedIndicator?: React.ReactElement\n  checked?: CheckedState\n  defaultChecked?: CheckedState\n  onCheckedChange?: (checked: CheckedState) => void\n}\n\nexport interface CheckboxWithLabelProps extends React.HTMLProps<HTMLDivElement> {\n  _checkbox: React.ComponentPropsWithoutRef<typeof Checkbox>\n  _label: React.ComponentPropsWithoutRef<typeof Label>\n}\n\nexport type CheckboxGroupSubtasks = { id: string; title: string; checked?: CheckedState }\nexport type CheckboxGroupProps = React.HTMLProps<HTMLDivElement> & {\n  subtasks: CheckboxGroupSubtasks[]\n  subtasks_default_values?: CheckboxWithLabelProps\n}\n",
      "type": "registry:ui",
      "target": "components/ui/checkbox.types.ts"
    },
    {
      "path": "checkbox/index.ts",
      "content": "export * from './checkbox'\nexport * from './checkbox.types'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    }
  ],
  "source": "/registry-ui-duckui/src/checkbox"
}