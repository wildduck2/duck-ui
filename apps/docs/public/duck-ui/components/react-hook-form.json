{
  "name": "react-hook-form",
  "type": "registry:ui",
  "dependencies": [
    "@gentleduck/libs",
    "@gentleduck/primitives",
    "react-hook-form",
    "zod",
    "@hookform/resolvers"
  ],
  "registryDependencies": [
    "label"
  ],
  "root_folder": "react-hook-form",
  "files": [
    {
      "path": "react-hook-form/index.ts",
      "content": "export * from './react-hook.form'\n",
      "type": "registry:ui",
      "target": "components/ui/index.ts"
    },
    {
      "path": "react-hook-form/react-hook.form.tsx",
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport { Slot } from '@radix-ui/react-slot'\nimport * as React from 'react'\nimport {\n  Controller,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n  FormProvider,\n  useFormContext,\n  useFormState,\n} from 'react-hook-form'\nimport { Label } from '../label'\n\nconst Form = FormProvider\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\nconst FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue)\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <FormField>')\n  }\n  const { id } = itemContext\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\ntype FormItemContextValue = {\n  id: string\n}\nconst FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue)\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const id = React.useId()\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div duck-form-item=\"\" className={cn('grid gap-2', className)} {...props} />\n    </FormItemContext.Provider>\n  )\n}\nfunction FormLabel({ className, ...props }: React.ComponentProps<typeof Label>) {\n  const { error, formItemId } = useFormField()\n  return (\n    <Label\n      duck-form-label=\"\"\n      data-error={!!error}\n      className={cn('data-[error=true]:text-destructive', className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n  return (\n    <Slot\n      duck-form-control=\"\"\n      id={formItemId}\n      aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\nfunction FormDescription({ className, ...props }: React.ComponentProps<'p'>) {\n  const { formDescriptionId } = useFormField()\n  return (\n    <p\n      duck-form-description=\"\"\n      id={formDescriptionId}\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? '') : props.children\n  if (!body) {\n    return null\n  }\n  return (\n    <p duck-form-message=\"\" id={formMessageId} className={cn('text-destructive text-sm', className)} {...props}>\n      {body}\n    </p>\n  )\n}\nexport { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField }\n",
      "type": "registry:ui",
      "target": "components/ui/react-hook.form.tsx"
    }
  ],
  "source": "/registry-ui-duckui/src/react-hook-form"
}