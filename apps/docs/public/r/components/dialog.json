{
  "dependencies": [
    "@gentleduck/primitives",
    "@gentleduck/motion",
    "@gentleduck/hooks",
    "@gentleduck/libs"
  ],
  "files": [
    {
      "content": "'use client'\nimport { useMediaQuery } from '@gentleduck/hooks/use-media-query'\nimport type React from 'react'\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from '../drawer'\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from './dialog'\n\nfunction DialogResponsive({ children, ...props }: React.ComponentPropsWithoutRef<typeof Dialog>): React.JSX.Element {\n  const isDesktop = useMediaQuery('(min-width: 768px)')\n\n  if (isDesktop) {\n    return <Dialog {...props}>{children}</Dialog>\n  }\n\n  return <Drawer {...props}>{children}</Drawer>\n}\n\nfunction DialogTriggerResponsive({\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogTrigger> &\n  React.ComponentPropsWithoutRef<typeof DrawerTrigger>): React.JSX.Element {\n  const isDesktop = useMediaQuery('(min-width: 768px)')\n\n  if (isDesktop) {\n    return <DialogTrigger {...props}>{children}</DialogTrigger>\n  }\n\n  return <DrawerTrigger {...props}>{children}</DrawerTrigger>\n}\n\nfunction DialogContentResponsive({\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogContent>): React.JSX.Element {\n  const isDesktop = useMediaQuery('(min-width: 768px)')\n\n  if (isDesktop) {\n    return <DialogContent {...(props as any)}>{children}</DialogContent>\n  }\n\n  return <DrawerContent {...(props as React.ComponentPropsWithoutRef<typeof DrawerContent>)}>{children}</DrawerContent>\n}\n\nfunction DialogHeaderResponsive({\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogHeader>): React.JSX.Element {\n  const isDesktop = useMediaQuery('(min-width: 768px)')\n\n  if (isDesktop) {\n    return <DialogHeader {...props}>{children}</DialogHeader>\n  }\n\n  return <DrawerHeader {...props}>{children}</DrawerHeader>\n}\n\nfunction DialogFooterResponsive({\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogFooter>): React.JSX.Element {\n  const isDesktop = useMediaQuery('(min-width: 768px)')\n\n  if (isDesktop) {\n    return <DialogFooter {...props}>{children}</DialogFooter>\n  }\n\n  return <DrawerFooter {...props}>{children}</DrawerFooter>\n}\n\nfunction DialogTitleResponsive({\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogTitle>): React.JSX.Element {\n  const isDesktop = useMediaQuery('(min-width: 768px)')\n\n  if (isDesktop) {\n    return <DialogTitle {...props}>{children}</DialogTitle>\n  }\n\n  return <DrawerTitle {...props}>{children}</DrawerTitle>\n}\n\nfunction DialogDescriptionResponsive({\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogDescription>): React.JSX.Element {\n  const isDesktop = useMediaQuery('(min-width: 768px)')\n\n  if (isDesktop) {\n    return <DialogDescription {...props}>{children}</DialogDescription>\n  }\n\n  return <DrawerDescription {...props}>{children}</DrawerDescription>\n}\n\nfunction DialogCloseResponsive({\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogClose> &\n  React.ComponentPropsWithoutRef<typeof DrawerClose>): React.JSX.Element {\n  const isDesktop = useMediaQuery('(min-width: 768px)')\n\n  if (isDesktop) {\n    return <DialogClose {...props}>{children}</DialogClose>\n  }\n\n  return <DrawerClose {...props}>{children}</DrawerClose>\n}\n\nexport {\n  DialogResponsive,\n  DialogTriggerResponsive,\n  DialogContentResponsive,\n  DialogHeaderResponsive,\n  DialogFooterResponsive,\n  DialogTitleResponsive,\n  DialogDescriptionResponsive,\n  DialogCloseResponsive,\n}\n",
      "path": "dialog/dialog-responsive.tsx",
      "target": "components/ui/dialog-responsive.tsx",
      "type": "registry:ui"
    },
    {
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport { AnimVariants } from '@gentleduck/motion/anim'\nimport DialogPrimitive, { useDialogContext } from '@gentleduck/primitives/dialog'\nimport { X } from 'lucide-react'\nimport type React from 'react'\n\nfunction Dialog({ closeButton = true, ...props }: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root closeButton={closeButton} {...props} data-slot=\"dialog\" />\n}\n\nfunction DialogTrigger({ children, ...props }: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Trigger>) {\n  return (\n    <DialogPrimitive.Trigger {...props} data-slot=\"dialog-trigger\">\n      {children}\n    </DialogPrimitive.Trigger>\n  )\n}\n\nexport function DialogCloseX({\n  ref,\n  size = 16,\n  children,\n  className,\n  ...props\n}: React.HTMLProps<HTMLButtonElement> & {\n  size?: number\n}): React.JSX.Element {\n  const { setOpen } = useDialogContext()\n\n  return (\n    <button\n      {...props}\n      aria-label=\"close\"\n      className={cn(\n        \"absolute absolute end-3 top-3 top-4 right-4 size-4 cursor-pointer rounded rounded-xs text-accent-foreground opacity-70 opacity-70 ring-offset-background transition-all transition-opacity hover:opacity-100 hover:opacity-100 focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground [&_svg:not([class*='size-'])]:size-4 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className,\n      )}\n      data-slot=\"dialog-close-x\"\n      onClick={() => setOpen?.(false)}\n      ref={ref}\n      type=\"button\">\n      {children ?? <X aria-hidden size={size} />}\n    </button>\n  )\n}\n\nfunction DialogContent({\n  children,\n  className,\n  ...props\n}: React.ComponentPropsWithRef<typeof DialogPrimitive.Content>): React.JSX.Element {\n  return (\n    <DialogPrimitive.Portal data-slot=\"dialog-portal\">\n      <DialogPrimitive.Content\n        className={cn(\n          AnimVariants(),\n          '-translate-x-1/2 -translate-y-1/2 pointer-events-none relative top-1/2 left-1/2 z-50 flex h-fit w-full flex-col gap-4 overflow-hidden text-balance rounded-lg border border-border bg-popover p-6 text-popover-foreground opacity-0 shadow-sm outline-hidden starting:[&[data-open=true]:opacity-0] data-[open=true]:pointer-events-auto data-[open=true]:opacity-100',\n          className,\n        )}\n        data-slot=\"dialog-content\"\n        dialogClose={DialogCloseX}\n        {...props}>\n        {children}\n      </DialogPrimitive.Content>\n      <DialogPrimitive.Overlay className={cn(AnimVariants())} data-slot=\"dialog-overlay\" />\n    </DialogPrimitive.Portal>\n  )\n}\n\nfunction DialogHeader({\n  className,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof DialogPrimitive.Heading>): React.JSX.Element {\n  return (\n    <DialogPrimitive.Heading\n      className={cn('flex flex-col gap-1.5 text-left rtl:text-right', className)}\n      data-slot=\"dialog-header\"\n      ref={ref}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ref, ...props }: React.HTMLProps<HTMLDivElement>): React.JSX.Element {\n  return (\n    <div\n      className={cn(`flex flex-col-reverse gap-2 sm:flex-row sm:justify-end`, className)}\n      ref={ref}\n      {...props}\n      data-slot=\"dialog-footer\"\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof DialogPrimitive.Title>): React.JSX.Element {\n  return (\n    <DialogPrimitive.Title\n      className={cn('font-semibold text-lg leading-none tracking-tight', className)}\n      data-slot=\"dialog-title\"\n      ref={ref}\n      {...props}\n    />\n  )\n}\n\nconst DialogDescription = ({\n  className,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof DialogPrimitive.Description>): React.JSX.Element => (\n  <DialogPrimitive.Description\n    className={cn('text-muted-foreground text-sm', className)}\n    ref={ref}\n    {...props}\n    data-slot=\"dialog-description\"\n  />\n)\n\nconst DialogClose = DialogTrigger\n\nexport { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogFooter, DialogTitle, DialogDescription, DialogClose }\n",
      "path": "dialog/dialog.tsx",
      "target": "components/ui/dialog.tsx",
      "type": "registry:ui"
    },
    {
      "content": "export * from './dialog'\nexport * from './dialog-responsive'\n",
      "path": "dialog/index.ts",
      "target": "components/ui/index.ts",
      "type": "registry:ui"
    }
  ],
  "name": "dialog",
  "root_folder": "dialog",
  "source": "/registry-ui-duckui/src/dialog",
  "type": "registry:ui"
}