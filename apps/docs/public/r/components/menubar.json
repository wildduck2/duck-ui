{
  "dependencies": [
    "@gentleduck/libs"
  ],
  "files": [
    {
      "content": "export * from './menubar'\n",
      "path": "menubar/index.ts",
      "target": "components/ui/index.ts",
      "type": "registry:ui"
    },
    {
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport * as React from 'react'\nimport { buttonVariants } from '../button'\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from '../dropdown-menu'\n\nexport type MenubarContextType = {}\nconst menubarContext = React.createContext<MenubarContextType | null>(null)\n\nfunction Menubar({ children, className, ...props }: React.HTMLProps<HTMLDivElement>) {\n  const wrapperRef = React.useRef<HTMLDivElement | null>(null)\n  const triggersRef = React.useRef<HTMLButtonElement[]>([])\n  const contentsRef = React.useRef<HTMLDialogElement[]>([])\n  const selectedItemRef = React.useRef<HTMLButtonElement | null>(null)\n  const clickedItemRef = React.useRef<HTMLButtonElement | null>(null)\n\n  const triggerHandlersRef = React.useRef(\n    new WeakMap<\n      HTMLButtonElement,\n      {\n        click: EventListenerOrEventListenerObject\n        focus: EventListenerOrEventListenerObject\n        mouseover: EventListenerOrEventListenerObject\n      }\n    >(),\n  )\n  const contentHandlersRef = React.useRef(new WeakMap<HTMLDialogElement, (e: KeyboardEvent) => void>())\n\n  React.useEffect(() => {\n    const wrapper = wrapperRef.current\n    if (!wrapper) return\n\n    const collectTriggers = () => {\n      const list = Array.from(wrapper.querySelectorAll('[duck-menubar-trigger]')) as HTMLButtonElement[]\n      triggersRef.current = list\n      if (!selectedItemRef.current && list.length > 0) {\n        selectedItemRef.current = list[0] as HTMLButtonElement\n      } else if (selectedItemRef.current && !list.includes(selectedItemRef.current)) {\n        selectedItemRef.current = list[0] ?? null\n      }\n      return list\n    }\n\n    collectTriggers()\n\n    const focusSelected = () => {\n      requestAnimationFrame(() => {\n        selectedItemRef.current?.focus()\n      })\n    }\n\n    const moveSelectedBy = (delta: number) => {\n      const list = triggersRef.current\n      if (list.length === 0) return\n      const currentIndex = Math.max(0, list.indexOf(selectedItemRef.current as HTMLButtonElement))\n      let nextIndex = currentIndex + delta\n      if (nextIndex < 0) nextIndex = list.length - 1\n      if (nextIndex >= list.length) nextIndex = 0\n      selectedItemRef.current = list[nextIndex] as HTMLButtonElement\n    }\n\n    const handleKeydown = (e: KeyboardEvent) => {\n      if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {\n        e.preventDefault()\n        moveSelectedBy(e.key === 'ArrowRight' ? 1 : -1)\n        focusSelected()\n      }\n\n      if (e.key === 'Enter') {\n        clickedItemRef.current = selectedItemRef.current\n      }\n    }\n\n    const handleContentKeydownFactory = (content: HTMLDialogElement) => {\n      const handler = (e: KeyboardEvent) => {\n        // collect actionable items inside the content\n        const items = Array.from(\n          content.querySelectorAll('[duck-dropdown-menu-item]:not([aria-disabled]), [duck-dropdown-menu-sub-trigger]'),\n        ) as HTMLElement[]\n\n        // UP / DOWN: navigate items inside the dropdown content and prevent page scroll\n        if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\n          if (items.length === 0) return\n          e.preventDefault() // <- prevents page scrolling\n\n          // find current selected item (aria-selected) or activeElement fallback\n          let currentIndex = items.findIndex((it) => it.getAttribute('aria-selected') !== null)\n          if (currentIndex === -1) {\n            const active = document?.activeElement\n            currentIndex = items.indexOf(active as HTMLElement)\n          }\n\n          const delta = e.key === 'ArrowDown' ? 1 : -1\n          const nextIndex =\n            currentIndex === -1\n              ? delta === 1\n                ? 0\n                : items.length - 1\n              : (currentIndex + delta + items.length) % items.length\n\n          const prev = items[currentIndex]\n          const next = items[nextIndex]\n\n          if (prev) prev.removeAttribute('aria-selected')\n          if (next) {\n            next.setAttribute('aria-selected', 'true')\n            // focus the item on next animation frame\n            requestAnimationFrame(() => {\n              ;(next as HTMLElement).focus()\n            })\n          }\n          return\n        }\n\n        // LEFT / RIGHT: keep the existing menubar logic (switch menubar items)\n        if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {\n          const selected = items.find((it) => it.getAttribute('aria-selected') !== null)\n\n          if (!selected?.hasAttribute('duck-dropdown-menu-sub-trigger')) {\n            e.preventDefault()\n            const delta = e.key === 'ArrowRight' ? 1 : -1\n            moveSelectedBy(delta)\n            clickedItemRef.current = selectedItemRef.current\n            selectedItemRef.current?.click()\n          }\n        }\n      }\n      return handler\n    }\n\n    wrapper.addEventListener('keydown', handleKeydown)\n\n    // attach handlers to triggers (only once each)\n    const triggers = triggersRef.current\n    triggers.forEach((trigger) => {\n      if (triggerHandlersRef.current.has(trigger)) return\n\n      const onClick = () => {\n        const contents = Array.from(document?.querySelectorAll('[duck-menubar-content]')) as HTMLDialogElement[]\n        contentsRef.current = contents\n\n        triggersRef.current.forEach((t) => {\n          if (t !== trigger && t.dataset.open === 'true') {\n            t.click()\n          }\n        })\n\n        contents.forEach((content) => {\n          if (!contentHandlersRef.current.has(content)) {\n            const handler = handleContentKeydownFactory(content)\n            content.addEventListener('keydown', handler)\n            contentHandlersRef.current.set(content, handler)\n          }\n        })\n      }\n      const onFocus = () => {\n        selectedItemRef.current = trigger\n      }\n\n      const onMouseOver = () => {\n        // if any trigger is currently open, hovering should switch the open menu\n        const anyOpen = triggersRef.current.some((t) => t.dataset.open === 'true')\n\n        // always update the visual selection for keyboard/mouse interplay\n        selectedItemRef.current = trigger\n\n        if (anyOpen) {\n          // only trigger a click if this hovered trigger isn't already open\n          if (trigger.dataset.open !== 'true') {\n            trigger.click()\n          }\n        }\n      }\n\n      trigger.addEventListener('click', onClick)\n      trigger.addEventListener('focus', onFocus)\n      trigger.addEventListener('mouseover', onMouseOver)\n\n      triggerHandlersRef.current.set(trigger, { click: onClick, focus: onFocus, mouseover: onMouseOver })\n    })\n\n    // attach any existing contents at mount\n    const initialContents = Array.from(document?.querySelectorAll('[duck-menubar-content]')) as HTMLDialogElement[]\n    contentsRef.current = initialContents\n    initialContents.forEach((content) => {\n      if (!contentHandlersRef.current.has(content)) {\n        const handler = handleContentKeydownFactory(content)\n        content.addEventListener('keydown', handler)\n        contentHandlersRef.current.set(content, handler)\n      }\n    })\n\n    // cleanup\n    return () => {\n      wrapper.removeEventListener('keydown', handleKeydown)\n\n      triggersRef.current.forEach((trigger) => {\n        const h = triggerHandlersRef.current.get(trigger)\n        if (!h) return\n        trigger.removeEventListener('click', h.click)\n        trigger.removeEventListener('focus', h.focus)\n        trigger.removeEventListener('mouseover', h.mouseover)\n        triggerHandlersRef.current.delete(trigger)\n      })\n    }\n  }, [])\n\n  return (\n    <menubarContext.Provider value={{}}>\n      <div\n        className={cn('flex items-center rounded-lg border p-1', className)}\n        {...props}\n        duck-menubar=\"\"\n        duck-slot=\"duck-menubar\"\n        ref={wrapperRef}>\n        {children}\n      </div>\n    </menubarContext.Provider>\n  )\n}\n\nfunction MenubarMenu({ children, ...props }: Omit<React.HTMLProps<HTMLDivElement>, 'contextMenu'>) {\n  return (\n    <DropdownMenu {...props} duck-menubar-menu=\"\" duck-slot=\"duck-menubar-menu\">\n      <div {...props}>{children}</div>\n    </DropdownMenu>\n  )\n}\n\nfunction MenubarTrigger({ children, className, ...props }: React.ComponentPropsWithRef<typeof DropdownMenuTrigger>) {\n  return (\n    <DropdownMenuTrigger\n      className={cn(\n        buttonVariants({ size: 'sm', variant: 'ghost' }),\n        'data-[open=\"true\"]:bg-secondary',\n        'focus-visible:bg-muted focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-transparent',\n        className,\n      )}\n      {...props}\n      duck-menubar-trigger=\"\"\n      duck-slot=\"duck-menubar-trigger\">\n      {children}\n    </DropdownMenuTrigger>\n  )\n}\n\nfunction MenubarContent({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuContent>) {\n  return <DropdownMenuContent {...props} duck-menubar-content=\"\" duck-slot=\"duck-menubar-content\" />\n}\n\nfunction MenubarItem({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuItem>) {\n  return <DropdownMenuItem {...props} duck-menubar-item=\"\" duck-slot=\"duck-menubar-item\" />\n}\n\nfunction MenubarSeparator({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuSeparator>) {\n  return <DropdownMenuSeparator {...props} duck-menubar-separator=\"\" duck-slot=\"duck-menubar-separator\" />\n}\n\nfunction MenubarLabel({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuLabel>) {\n  return <DropdownMenuLabel {...props} duck-menubar-label=\"\" duck-slot=\"duck-menubar-label\" />\n}\n\nfunction MenubarCheckboxItem({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuCheckboxItem>) {\n  return <DropdownMenuCheckboxItem {...props} duck-menubar-checkbox-item=\"\" duck-slot=\"duck-menubar-checkbox-item\" />\n}\n\nfunction MenubarRadioGroup({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuRadioGroup>) {\n  return <DropdownMenuRadioGroup {...props} duck-menubar-radio-group=\"\" duck-slot=\"duck-menubar-radio-group\" />\n}\n\nfunction MenubarRadioItem({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuRadioItem>) {\n  return <DropdownMenuRadioItem {...props} duck-menubar-radio-item=\"\" duck-slot=\"duck-menubar-radio-item\" />\n}\n\nfunction MenubarSubContent({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuSubContent>) {\n  return <DropdownMenuSubContent {...props} duck-menubar-sub-content=\"\" duck-slot=\"duck-menubar-sub-content\" />\n}\n\nfunction MenubarSubTrigger({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuSubTrigger>) {\n  return <DropdownMenuSubTrigger {...props} duck-menubar-sub-trigger=\"\" duck-slot=\"duck-menubar-sub-trigger\" />\n}\n\nfunction MenubarGroup({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuGroup>) {\n  return <DropdownMenuGroup {...props} duck-menubar-group=\"\" duck-slot=\"duck-menubar-group\" />\n}\n\nfunction MenubarSub({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuSub>) {\n  return <DropdownMenuSub {...props} duck-menubar-sub=\"\" duck-slot=\"duck-menubar-sub\" />\n}\n\nfunction MenubarShortcut({ ...props }: React.ComponentPropsWithRef<typeof DropdownMenuShortcut>) {\n  return <DropdownMenuShortcut {...props} duck-menubar-shortcut=\"\" duck-slot=\"duck-menubar-shortcut\" />\n}\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
      "path": "menubar/menubar.tsx",
      "target": "components/ui/menubar.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "menubar",
  "registryDependencies": [
    "button",
    "dropdown-menu"
  ],
  "root_folder": "menubar",
  "source": "/registry-ui-duckui/src/menubar",
  "type": "registry:ui"
}