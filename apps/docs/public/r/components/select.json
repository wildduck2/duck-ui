{
  "dependencies": [
    "@gentleduck/primitives",
    "@gentleduck/libs"
  ],
  "files": [
    {
      "content": "export * from './select'\nexport * from './select.hooks'\nexport * from './select.libs'\n",
      "path": "select/index.ts",
      "target": "components/ui/index.ts",
      "type": "registry:ui"
    },
    {
      "content": "import React from 'react'\n\nexport function useSelectScroll(\n  open: boolean,\n  itemsRef: React.RefObject<HTMLLIElement[]>,\n  selectedItemRef: React.RefObject<HTMLLIElement | null>,\n  contentRef: React.RefObject<HTMLDivElement | null>, // make sure this is the scrollable div, not the dialog\n) {\n  React.useEffect(() => {\n    if (!open || !contentRef.current) return\n\n    const scrollContainer = contentRef.current\n    const keyDown = scrollContainer.parentElement?.querySelector<HTMLButtonElement>('[duck-select-scroll-down-button]')\n    const keyUp = scrollContainer.parentElement?.querySelector<HTMLButtonElement>('[duck-select-scroll-up-button]')\n\n    if (!keyDown || !keyUp) return\n\n    let intervalId: NodeJS.Timeout | null = null\n\n    const moveSelectionDown = () => {\n      if (!itemsRef.current || !selectedItemRef.current) return\n\n      const currentIndex = itemsRef.current.findIndex((item) => item.id === selectedItemRef.current?.id)\n      if (currentIndex === -1) return\n\n      const nextIndex = Math.min(currentIndex + 1, itemsRef.current.length - 1)\n      selectedItemRef.current = itemsRef.current[nextIndex] as HTMLLIElement\n\n      // Instead of scrollIntoView, scroll only inside the container\n      scrollContainer.scrollTop = selectedItemRef.current.offsetTop - scrollContainer.clientHeight / 2\n    }\n\n    const moveSelectionUp = () => {\n      if (!itemsRef.current || !selectedItemRef.current) return\n\n      const currentIndex = itemsRef.current.findIndex((item) => item.id === selectedItemRef.current?.id)\n      if (currentIndex === -1) return\n\n      const prevIndex = Math.max(currentIndex - 1, 0)\n      selectedItemRef.current = itemsRef.current[prevIndex] as HTMLLIElement\n\n      scrollContainer.scrollTop = selectedItemRef.current.offsetTop - scrollContainer.clientHeight / 2\n    }\n\n    const startInterval = (fn: () => void) => {\n      stopInterval()\n      fn()\n      intervalId = setInterval(fn, 40)\n    }\n\n    const stopInterval = () => {\n      if (intervalId) {\n        clearInterval(intervalId)\n        intervalId = null\n      }\n    }\n\n    // Store references so removeEventListener works\n    const handleDownEnter = () => startInterval(moveSelectionDown)\n    const handleDownLeave = stopInterval\n    const handleUpEnter = () => startInterval(moveSelectionUp)\n    const handleUpLeave = stopInterval\n\n    keyDown.addEventListener('mouseenter', handleDownEnter)\n    keyDown.addEventListener('mouseleave', handleDownLeave)\n    keyUp.addEventListener('mouseenter', handleUpEnter)\n    keyUp.addEventListener('mouseleave', handleUpLeave)\n\n    return () => {\n      keyDown.removeEventListener('mouseenter', handleDownEnter)\n      keyDown.removeEventListener('mouseleave', handleDownLeave)\n      keyUp.removeEventListener('mouseenter', handleUpEnter)\n      keyUp.removeEventListener('mouseleave', handleUpLeave)\n      stopInterval()\n    }\n  }, [open, itemsRef, selectedItemRef, contentRef])\n}\n",
      "path": "select/select.hooks.ts",
      "target": "components/ui/select.hooks.ts",
      "type": "registry:ui"
    },
    {
      "content": "import { dstyleItem, styleItem } from '../command'\n\nexport function initRefs(\n  open: boolean,\n  groupsRef: React.RefObject<HTMLUListElement[] | null>,\n  wrapperRef: React.RefObject<HTMLDivElement | null>,\n  contentRef: React.RefObject<HTMLDivElement | null>,\n  selectedItemRef: React.RefObject<HTMLLIElement | null>,\n  itemsRef: React.RefObject<HTMLLIElement[]>,\n  setSelectedItem: (item: HTMLLIElement) => void,\n  onOpenChange: (open: boolean) => void,\n  value: string,\n  onValueChange: (value: string) => void,\n  defaultValue: string,\n) {\n  const items = contentRef.current?.querySelectorAll('[duck-select-item]') as never as HTMLLIElement[]\n  const groups = contentRef.current?.querySelectorAll('[duck-select-group]') as never as HTMLUListElement[]\n\n  itemsRef.current = Array.from(items ?? [])\n  groupsRef.current = Array.from(groups ?? [])\n\n  itemsRef.current = itemsRef.current.filter(\n    (item) => !(item.hasAttribute('aria-disabled') || item.getAttribute('aria-disabled') === 'true'),\n  )\n\n  // Select initial item:\n  if (!selectedItemRef.current) {\n    let item: HTMLLIElement | null = null\n\n    if (value) {\n      item =\n        itemsRef.current.find((el) => el.getAttribute('value') === value || el.getAttribute('data-value') === value) ??\n        null\n    } else if (defaultValue) {\n      item =\n        itemsRef.current.find(\n          (el) => el.getAttribute('value') === defaultValue || el.getAttribute('data-value') === defaultValue,\n        ) ?? null\n    } else {\n      item = itemsRef.current?.[0] ?? null\n    }\n\n    if (item) {\n      styleItem(item)\n      item.focus()\n      selectedItemRef.current = item\n    }\n  }\n\n  for (let i = 0; i < itemsRef.current?.length; i++) {\n    const item = itemsRef.current[i] as HTMLLIElement\n    if (\n      selectedItemRef.current?.getAttribute('value') === item.getAttribute('value') ||\n      item.getAttribute('data-value') === value\n    ) {\n      styleItem(item)\n    }\n\n    item.addEventListener('mouseenter', () => {\n      if (open) {\n        for (let i = 0; i < itemsRef.current?.length; i++) {\n          const item = itemsRef.current[i] as HTMLLIElement\n          dstyleItem(item)\n        }\n\n        item?.setAttribute('aria-selected', '')\n        item?.focus()\n        selectedItemRef.current = item\n      }\n    })\n\n    item.addEventListener('click', () => {\n      selectedItemRef.current = item\n      setSelectedItem(item)\n      onValueChange(item.getAttribute('value') as string)\n      onOpenChange(false)\n    })\n  }\n}\n",
      "path": "select/select.libs.ts",
      "target": "components/ui/select.libs.ts",
      "type": "registry:ui"
    },
    {
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport { usePopoverContext } from '@gentleduck/primitives/popover'\nimport { CheckIcon, ChevronDown, ChevronUp } from 'lucide-react'\nimport * as React from 'react'\nimport { Button, buttonVariants } from '../button'\nimport { useHandleKeyDown } from '../command'\nimport { Popover, PopoverContent, PopoverTrigger } from '../popover'\nimport { useSelectScroll } from './select.hooks'\nimport { initRefs } from './select.libs'\nimport type { SelectContextType } from './select.types'\n\nexport const SelectContext = React.createContext<SelectContextType | null>(null)\nexport function useSelectContext() {\n  const context = React.useContext(SelectContext)\n  if (context === null) {\n    throw new Error('useSelectContext must be used within a SelectProvider')\n  }\n  return context\n}\n\nfunction SelectWrapper({\n  children,\n  scrollable = false,\n  value = '',\n  onValueChange = () => {},\n  defaultValue,\n  ...props\n}: Omit<React.HTMLProps<HTMLDivElement>, 'value' | 'defaultValue'> & {\n  scrollable?: boolean\n  value?: string\n  onValueChange?: (value: string) => void\n  defaultValue?: string\n}) {\n  const { open, setOpen: onOpenChange } = usePopoverContext()\n\n  const wrapperRef = React.useRef<HTMLDivElement | null>(null)\n  const triggerRef = React.useRef<HTMLButtonElement | null>(null)\n  const contentRef = React.useRef<HTMLDivElement | null>(null)\n  const groupsRef = React.useRef<HTMLUListElement[]>([])\n  const [selectedItem, setSelectedItem] = React.useState<HTMLLIElement | null>(null)\n  const itemsRef = React.useRef<HTMLLIElement[]>([])\n  const selectedItemRef = React.useRef<HTMLLIElement | null>(null)\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      initRefs(\n        open,\n        groupsRef,\n        wrapperRef,\n        contentRef,\n        selectedItemRef,\n        itemsRef,\n        setSelectedItem,\n        onOpenChange,\n        value,\n        onValueChange,\n        defaultValue as string,\n      )\n    }, 0)\n  }, [open])\n\n  useSelectScroll(open, itemsRef, selectedItemRef, contentRef)\n  useHandleKeyDown({\n    itemsRef,\n    open,\n    originalItemsRef: itemsRef,\n    selectedItem,\n    setSelectedItem: (item) => {\n      selectedItemRef.current = item\n    },\n  })\n\n  return (\n    <SelectContext.Provider\n      value={{\n        contentRef,\n        groupsRef,\n        itemsRef,\n        open,\n        scrollable,\n        selectedItem,\n        triggerRef: triggerRef,\n        value,\n        wrapperRef,\n      }}>\n      <div {...props} data-slot=\"select\" duck-select=\"\" ref={wrapperRef}>\n        {children}\n      </div>\n    </SelectContext.Provider>\n  )\n}\n\nfunction Select({\n  children,\n  onValueChange,\n  contextMenu,\n  defaultValue,\n  value,\n  ...props\n}: React.ComponentPropsWithRef<typeof Popover> & {\n  defaultValue?: string\n  value?: string\n  onValueChange?: (value: string) => void\n  scrollable?: boolean\n}) {\n  return (\n    <Popover {...props} contextMenu={contextMenu} matchWidth>\n      <SelectWrapper {...props} defaultValue={defaultValue} onValueChange={onValueChange} value={value}>\n        {children}\n      </SelectWrapper>\n    </Popover>\n  )\n}\n\nfunction SelectTrigger({\n  children,\n  className,\n  customIndicator,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof PopoverTrigger> & { customIndicator?: React.ReactNode }) {\n  const { triggerRef } = useSelectContext()\n  return (\n    <PopoverTrigger\n      {...props}\n      className={cn(buttonVariants({ variant: 'outline' }), 'w-full justify-between text-base', className)}\n      data-slot=\"select-trigger\"\n      duck-select-trigger=\"\"\n      ref={triggerRef as never}>\n      {children}\n      <span className=\"[&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-muted-foreground [&>svg]:duration-300\">\n        {customIndicator ? customIndicator : <ChevronDown className=\"-mr-1\" />}\n      </span>\n    </PopoverTrigger>\n  )\n}\n\nfunction SelectContent({ children, className, ...props }: React.ComponentPropsWithRef<typeof PopoverContent>) {\n  const { scrollable, contentRef } = useSelectContext()\n  return (\n    <PopoverContent\n      className={cn('w-auto px-1.5 [&>div]:w-full', scrollable ? 'py-0' : 'py-1', className)}\n      data-slot=\"select-content\"\n      duck-select-content=\"\"\n      {...props}>\n      {scrollable && <SelectScrollUpButton />}\n      <div\n        className={cn(scrollable && 'max-h-[450px] overflow-y-scroll')}\n        data-slot=\"select-content-scrollable\"\n        duck-select-content-scrollable=\"\"\n        ref={contentRef as never}>\n        {children}\n      </div>\n      {scrollable && <SelectScrollDownButton />}\n    </PopoverContent>\n  )\n}\n\nfunction SelectGroup({ children, ...props }: React.HTMLProps<HTMLUListElement>) {\n  return <ul {...props}>{children}</ul>\n}\n\nfunction SelectValue({ className, children, placeholder, ...props }: React.HTMLProps<HTMLDivElement>) {\n  const { value } = useSelectContext()\n  return (\n    <div\n      className={cn(\n        'relative flex select-none items-center gap-2 truncate rounded-xs text-sm outline-hidden',\n        className,\n      )}\n      {...props}\n      data-slot=\"select-value\"\n      duck-select-value=\"\">\n      {value.length > 0 ? value : <span className=\"text-muted-foreground\">{placeholder}</span>}\n    </div>\n  )\n}\n\nfunction SelectLabel({ htmlFor, children, className, ref, ...props }: React.HTMLProps<HTMLLabelElement>) {\n  return (\n    <label\n      className={cn('px-2 text-muted-foreground text-sm', className)}\n      htmlFor={htmlFor}\n      ref={ref}\n      {...props}\n      data-slot=\"select-label\"\n      duck-select-label=\"\">\n      {children}\n    </label>\n  )\n}\n\nfunction SelectItem({\n  children,\n  value,\n  className,\n  disabled,\n  ref,\n  ...props\n}: Omit<React.HTMLProps<HTMLLIElement>, 'value'> & { value: string }) {\n  const { value: _value, selectedItem } = useSelectContext()\n  const id = React.useId()\n\n  return (\n    // biome-ignore lint: false positive\n    <li\n      aria-haspopup=\"dialog\"\n      id={id}\n      popoverTarget={id}\n      popoverTargetAction=\"hide\"\n      ref={ref}\n      // biome-ignore lint: false positive\n      role=\"checkbox\"\n      {...props}\n      aria-disabled={disabled}\n      className={cn(\n        \"relative flex flex w-full cursor-default cursor-pointer select-none items-center gap-2 rounded-sm px-2 py-1 text-sm outline-hidden transition-color duration-300 will-change-300 hover:bg-background hover:text-accent-foreground data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground [&[aria-selected]]:bg-muted\",\n        disabled && 'pointer-events-none opacity-50',\n      )}\n      data-slot=\"select-item\"\n      data-value={value}\n      duck-select-item=\"\"\n      value={value}>\n      <div\n        className={cn(\n          'relative flex select-none items-center gap-2 truncate rounded-xs text-sm outline-hidden',\n          className,\n        )}>\n        {children}\n      </div>\n      {(_value.length > 0 ? _value : selectedItem?.getAttribute('data-value')) === String(value) && (\n        <span\n          className=\"absolute flex items-center justify-center transition-none duration-0 ltr:right-2 ltr:pl-2 rtl:left-2 rtl:pr-2\"\n          data-slot=\"select-indicator\"\n          duck-select-indicator=\"\"\n          id=\"select-indicator\">\n          <CheckIcon className=\"!size-3.5 shrink-0\" />\n        </span>\n      )}\n    </li>\n  )\n}\n\nfunction SelectSeparator({ children, className, ref, ...props }: React.HTMLProps<HTMLDivElement>) {\n  return (\n    <div\n      className={cn('-mx-1 my-1 h-px bg-muted', className)}\n      ref={ref}\n      {...props}\n      data-slot=\"select-separator\"\n      duck-select-separator=\"\"\n    />\n  )\n}\n\nfunction SelectScrollButton({\n  children,\n  className,\n  scrollDown,\n  ...props\n}: React.ComponentPropsWithRef<typeof Button> & { scrollDown?: boolean }) {\n  return (\n    <Button\n      className={cn(\n        'sticky z-50 w-full cursor-default cursor-pointer rounded-none bg-background p-0 [&>div]:justify-center',\n        scrollDown ? 'bottom-0' : '',\n        className,\n      )}\n      size=\"sm\"\n      variant=\"nothing\"\n      {...props}\n      data-slot=\"select-scroll-up-button\"\n      duck-select-scroll-button=\"\">\n      {scrollDown ? <ChevronDown className=\"shrink-0\" /> : <ChevronUp className=\"shrink-0\" />}\n    </Button>\n  )\n}\n\nfunction SelectScrollUpButton(props: React.ComponentPropsWithRef<typeof Button>) {\n  return (\n    <SelectScrollButton\n      {...props}\n      data-slot=\"select-scroll-up-button\"\n      duck-select-scroll-up-button=\"\"\n      scrollDown={false}\n    />\n  )\n}\n\nfunction SelectScrollDownButton(props: React.ComponentPropsWithRef<typeof Button>) {\n  return (\n    <SelectScrollButton\n      {...props}\n      data-slot=\"select-scroll-down-button\"\n      duck-select-scroll-down-button=\"\"\n      scrollDown={true}\n    />\n  )\n}\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
      "path": "select/select.tsx",
      "target": "components/ui/select.tsx",
      "type": "registry:ui"
    },
    {
      "content": "export interface SelectContextType {\n  open: boolean\n  value: string\n  wrapperRef: React.RefObject<HTMLDivElement | null>\n  triggerRef: React.RefObject<HTMLButtonElement | null>\n  contentRef: React.RefObject<HTMLDivElement | null>\n  groupsRef: React.RefObject<HTMLUListElement[] | null>\n  itemsRef: React.RefObject<HTMLLIElement[] | null>\n  selectedItem: HTMLLIElement | null\n  scrollable: boolean\n}\n",
      "path": "select/select.types.ts",
      "target": "components/ui/select.types.ts",
      "type": "registry:ui"
    }
  ],
  "name": "select",
  "registryDependencies": [
    "command",
    "button",
    "popover"
  ],
  "root_folder": "select",
  "source": "/registry-ui-duckui/src/select",
  "type": "registry:ui"
}