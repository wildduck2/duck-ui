{
  "dependencies": [
    "@gentleduck/libs",
    "@gentleduck/primitives"
  ],
  "files": [
    {
      "content": "export * from './tabs'\n",
      "path": "tabs/index.ts",
      "target": "components/ui/index.ts",
      "type": "registry:ui"
    },
    {
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport { MountMinimal } from '@gentleduck/primitives/mount'\nimport * as React from 'react'\n\nexport function useTabs() {\n  const context = React.useContext(TabsContext)\n  if (context === null) {\n    throw new Error('useTabs must be used within a TabsList')\n  }\n  return context\n}\n\nexport interface TabsContextProps {\n  activeItem: string\n  setActiveItem: React.Dispatch<React.SetStateAction<string>>\n}\n\nconst TabsContext = React.createContext<TabsContextProps | null>(null)\n\nexport interface TabsProps extends Omit<React.HTMLProps<HTMLDivElement>, 'defaultValue'> {\n  value?: string\n  defaultValue?: string\n  onValueChange?: (value: string) => void\n}\n\nfunction Tabs({ value, defaultValue, onValueChange, ...props }: TabsProps) {\n  const [activeItem, setActiveItem] = React.useState<string>(defaultValue ?? value ?? '')\n\n  React.useEffect(() => {\n    if (onValueChange) onValueChange(activeItem)\n  }, [activeItem])\n\n  return (\n    <TabsContext.Provider value={{ activeItem, setActiveItem }}>\n      <div {...props} aria-orientation=\"vertical\" duck-tabs=\"\" role=\"tablist\" />\n    </TabsContext.Provider>\n  )\n}\n\nexport interface TabsListProps extends React.HTMLProps<HTMLUListElement> {}\nconst TabsList = ({ className, ref, ...props }: TabsListProps) => (\n  <ul\n    className={cn(\n      'inline-flex w-fit items-center justify-center gap-2 rounded-md bg-muted p-1 text-muted-foreground',\n\n      className,\n    )}\n    ref={ref}\n    {...props}\n    duck-tabs-list=\"\"\n  />\n)\n\nexport interface TabsTriggerProps extends React.HTMLProps<HTMLLIElement> {\n  value: string\n  defaultChecked?: boolean\n}\n\nconst TabsTrigger = ({\n  className,\n  children,\n  defaultChecked,\n  onClick,\n  value,\n  disabled,\n  ref,\n  ...props\n}: TabsTriggerProps) => {\n  const { setActiveItem, activeItem } = useTabs()\n  const isActive = value === activeItem\n\n  React.useEffect(() => {\n    if (defaultChecked) setActiveItem(value)\n  }, [defaultChecked])\n\n  return (\n    <li\n      className={cn(\n        'relative inline-flex h-[29.04px] items-center justify-center whitespace-nowrap rounded-sm px-3 font-medium text-sm ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        isActive && 'bg-background text-foreground shadow-sm',\n        disabled && 'pointer-events-none opacity-50',\n        className,\n      )}\n      data-selected={isActive}\n      data-value={value}\n      id={`tab-${value}`}\n      ref={ref}\n      {...props}\n      duck-tabs-trigger=\"\">\n      <input\n        checked={isActive}\n        className=\"absolute inset-0 appearance-none rounded-md ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n        defaultChecked={defaultChecked}\n        disabled={disabled}\n        id={value}\n        name=\"tab\"\n        onChange={() => setActiveItem(value)}\n        type=\"radio\"\n        value={value}\n      />\n      <label className=\"flex items-center gap-2 font-medium\" htmlFor={value}>\n        {children}\n      </label>\n    </li>\n  )\n}\n\nconst TabsContent = ({\n  children,\n  forceMount = false,\n  className,\n  value,\n  ref,\n  ...props\n}: React.HTMLProps<HTMLDivElement> & {\n  value: string\n  forceMount?: boolean\n}) => {\n  const { activeItem } = useTabs()\n  const localRef = React.useRef<HTMLDivElement>(null)\n\n  return (\n    <div\n      aria-hidden={activeItem !== value}\n      className={cn(\n        'mt-2 shrink-0 list-none ring-offset-background focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        activeItem === value ? 'h-auto opacity-100' : 'h-0 opacity-0',\n        className,\n      )}\n      data-value={value}\n      hidden={activeItem !== value}\n      ref={localRef}\n      role=\"tabpanel\"\n      tabIndex={-1}\n      {...props}\n      duck-tabs-content=\"\">\n      <MountMinimal forceMount={forceMount} open={activeItem === value} ref={null}>\n        {children}\n      </MountMinimal>\n    </div>\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "path": "tabs/tabs.tsx",
      "target": "components/ui/tabs.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "tabs",
  "registryDependencies": [],
  "root_folder": "tabs",
  "source": "/registry-ui-duckui/src/tabs",
  "type": "registry:ui"
}