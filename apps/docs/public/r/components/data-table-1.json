{
  "files": [
    {
      "content": "'use client'\n\nimport { Button } from '@gentleduck/registry-ui-duckui/button'\nimport { Checkbox } from '@gentleduck/registry-ui-duckui/checkbox'\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@gentleduck/registry-ui-duckui/dropdown-menu'\nimport { Input } from '@gentleduck/registry-ui-duckui/input'\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@gentleduck/registry-ui-duckui/table'\nimport {\n  type ColumnDef,\n  type ColumnFiltersState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  type SortingState,\n  useReactTable,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport { ArrowUpDown, ChevronDown, MoreHorizontal } from 'lucide-react'\nimport * as React from 'react'\n\nconst data: Payment[] = [\n  {\n    amount: 316,\n    email: 'ken99@example.com',\n    id: 'm5gr84i9',\n    status: 'success',\n  },\n  {\n    amount: 242,\n    email: 'Abe45@example.com',\n    id: '3u1reuv4',\n    status: 'success',\n  },\n  {\n    amount: 837,\n    email: 'Monserrat44@example.com',\n    id: 'derv1ws0',\n    status: 'processing',\n  },\n  {\n    amount: 874,\n    email: 'Silas22@example.com',\n    id: '5kma53ae',\n    status: 'success',\n  },\n  {\n    amount: 721,\n    email: 'carmella@example.com',\n    id: 'bhqecj4p',\n    status: 'failed',\n  },\n]\n\nexport type Payment = {\n  id: string\n  amount: number\n  status: 'pending' | 'processing' | 'success' | 'failed'\n  email: string\n}\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    cell: ({ row }) => (\n      <Checkbox\n        aria-label=\"Select row\"\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n      />\n    ),\n    enableHiding: false,\n    enableSorting: false,\n    header: ({ table }) => (\n      <Checkbox\n        aria-label=\"Select all\"\n        checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && 'indeterminate')}\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n      />\n    ),\n    id: 'select',\n  },\n  {\n    accessorKey: 'status',\n    cell: ({ row }) => <div className=\"capitalize\">{row.getValue('status')}</div>,\n    header: 'Status',\n  },\n  {\n    accessorKey: 'email',\n    cell: ({ row }) => <div className=\"text-sm lowercase\">{row.getValue('email')}</div>,\n    header: ({ column }) => {\n      return (\n        <Button\n          className=\"text-sm\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\n          size={'sm'}\n          variant=\"ghost\">\n          Email\n          <ArrowUpDown />\n        </Button>\n      )\n    },\n  },\n  {\n    accessorKey: 'amount',\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue('amount'))\n\n      // Format the amount as a dollar amount\n      const formatted = new Intl.NumberFormat('en-US', {\n        currency: 'USD',\n        style: 'currency',\n      }).format(amount)\n\n      return <div className=\"text-right font-medium text-sm\">{formatted}</div>\n    },\n    header: () => <div className=\"text-right\">Amount</div>,\n  },\n  {\n    cell: ({ row }) => {\n      const payment = row.original\n\n      return (\n        <DropdownMenu placement=\"bottom-end\">\n          <DropdownMenuTrigger asChild>\n            <Button className=\"ml-auto h-8 w-8 p-0\" size={'sm'} variant=\"ghost\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-[170px]\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem onClick={() => navigator.clipboard.writeText(payment.id)}>\n              Copy payment ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View customer</DropdownMenuItem>\n            <DropdownMenuItem>View payment details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )\n    },\n    enableHiding: false,\n    id: 'actions',\n  },\n]\n\nexport default function DataTableDemo() {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n\n  const table = useReactTable({\n    columns,\n    data,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    state: {\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n      sorting,\n    },\n  })\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"flex items-center justify-between py-4\">\n        <Input\n          className=\"max-w-sm\"\n          onChange={(event) => table.getColumn('email')?.setFilterValue(event.currentTarget.value)}\n          placeholder=\"Filter emails...\"\n          value={(table.getColumn('email')?.getFilterValue() as string) ?? ''}\n        />\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button className=\"ml-auto text-sm\" variant=\"outline\">\n              Columns <ChevronDown />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent>\n            {table\n              .getAllColumns()\n              .filter((column) => column.getCanHide())\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    checked={column.getIsVisible()}\n                    className=\"capitalize\"\n                    key={column.id}\n                    onCheckedChange={(value) => column.toggleVisibility(!!value)}>\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className=\"overflow-hidden rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow data-state={row.getIsSelected() && 'selected'} key={row.id}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell className=\"h-24 text-center\" colSpan={columns.length}>\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <div className=\"flex-1 text-muted-foreground text-sm\">\n          {table.getFilteredSelectedRowModel().rows.length} of {table.getFilteredRowModel().rows.length} row(s)\n          selected.\n        </div>\n        <div className=\"space-x-2\">\n          <Button\n            disabled={!table.getCanPreviousPage()}\n            onClick={() => table.previousPage()}\n            size=\"sm\"\n            variant=\"outline\">\n            Previous\n          </Button>\n          <Button disabled={!table.getCanNextPage()} onClick={() => table.nextPage()} size=\"sm\" variant=\"outline\">\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "path": "data-table/data-table-1.tsx",
      "target": "components/data-table-1.tsx",
      "type": "registry:example"
    }
  ],
  "name": "data-table-1",
  "registryDependencies": [
    "data-table",
    "table"
  ],
  "root_folder": "data-table",
  "source": "/registry-examples-duckui/src/data-table",
  "type": "registry:example"
}