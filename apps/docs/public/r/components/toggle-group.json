{
  "dependencies": [
    "@gentleduck/variants",
    "@gentleduck/libs"
  ],
  "files": [
    {
      "content": "export * from './toggle-group'\nexport * from './toggle-group.hooks'\n",
      "path": "toggle-group/index.ts",
      "target": "components/ui/index.ts",
      "type": "registry:ui"
    },
    {
      "content": "import React from 'react'\n\nexport function ToggleGroupInit(type?: 'single' | 'multiple', onValueChange?: (value: string) => void) {\n  const wrapperRef = React.useRef<HTMLUListElement>(null)\n  const itemsRef = React.useRef<HTMLDivElement[]>([])\n  const selectedItemRef = React.useRef<HTMLDivElement[]>([])\n\n  React.useEffect(() => {\n    const items = Array.from(wrapperRef.current?.querySelectorAll('[toggle-group-item]') as never as HTMLDivElement[])\n    itemsRef.current = items\n\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i] as HTMLInputElement\n      item.addEventListener('click', () => {\n        if (type === 'single') {\n          for (let i = 0; i < items.length; i++) {\n            const item = items[i] as HTMLInputElement\n            item.setAttribute('aria-checked', 'false')\n            item.setAttribute('aria-selected', 'false')\n            item.checked = false\n          }\n        }\n\n        onValueChange?.(item.value)\n        selectedItemRef.current = type === 'single' ? [item] : [...selectedItemRef.current, item]\n        item.setAttribute('aria-checked', 'true')\n        item.setAttribute('aria-selected', 'true')\n        item.checked = true\n      })\n    }\n  }, [type])\n  return { itemsRef, selectedItemRef, wrapperRef }\n}\n",
      "path": "toggle-group/toggle-group.hooks.ts",
      "target": "components/ui/toggle-group.hooks.ts",
      "type": "registry:ui"
    },
    {
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport type { VariantProps } from '@gentleduck/variants'\nimport * as React from 'react'\nimport * as Toggle from '../toggle'\nimport { ToggleGroupInit } from './toggle-group.hooks'\n\nexport interface ToggleGroupContextProps extends VariantProps<typeof Toggle.toggleVariants> {\n  type?: 'single' | 'multiple'\n  selectedItemRef: React.RefObject<HTMLDivElement[]>\n  itemsRef: React.RefObject<HTMLDivElement[]>\n  wrapperRef: React.RefObject<HTMLUListElement | null>\n}\n\nconst ToggleGroupContext = React.createContext<ToggleGroupContextProps | null>(null)\n\nfunction ToggleGroup({\n  className,\n  variant = 'default',\n  size,\n  type,\n  children,\n  onValueChange,\n  ref,\n  ...props\n}: Omit<React.HTMLProps<HTMLUListElement>, 'size'> &\n  VariantProps<typeof Toggle.toggleVariants> & {\n    type?: 'single' | 'multiple'\n    onValueChange?: (value: string) => void\n  }) {\n  const { selectedItemRef, wrapperRef, itemsRef } = ToggleGroupInit(type, onValueChange)\n\n  return (\n    <ToggleGroupContext.Provider value={{ itemsRef, selectedItemRef, size, type, variant, wrapperRef }}>\n      <ul\n        className={cn(\n          'flex items-center justify-center overflow-hidden rounded-md [&>:first-child>input]:rounded-l-md [&>:last-child>input]:rounded-r-md',\n          variant === 'outline' &&\n            '[&>*:first-child>input]:border-r-0 [&>*:not(:first-child):not(:last-child)>input]:border-r-0',\n          className,\n        )}\n        ref={wrapperRef}\n        {...props}\n        data-type={type}\n        duck-toggle-group=\"\"\n        data-slot=\"toggle-group\">\n        {children}\n      </ul>\n    </ToggleGroupContext.Provider>\n  )\n}\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  value,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof Toggle.Toggle>) {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <Toggle.Toggle\n      className={cn('rounded-none', className)}\n      ref={ref}\n      size={context?.size || size}\n      value={value}\n      variant={context?.variant || variant}\n      {...props}\n      duck-toggle-group-item=\"\"\n      data-slot=\"toggle-group-item\">\n      {children}\n    </Toggle.Toggle>\n  )\n}\n\nexport { ToggleGroup, ToggleGroupItem }\n",
      "path": "toggle-group/toggle-group.tsx",
      "target": "components/ui/toggle-group.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "toggle-group",
  "registryDependencies": [
    "toggle"
  ],
  "root_folder": "toggle-group",
  "source": "/registry-ui-duckui/src/toggle-group",
  "type": "registry:ui"
}