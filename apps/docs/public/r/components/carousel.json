{
  "dependencies": [
    "embla-carousel-react",
    "@gentleduck/libs"
  ],
  "files": [
    {
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport useEmblaCarousel from 'embla-carousel-react'\nimport { ArrowLeft, ArrowRight } from 'lucide-react'\nimport * as React from 'react'\nimport { Button } from '../button'\nimport type { CarouselApi, CarouselContextProps, CarouselProps } from './carousel.types'\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />')\n  }\n\n  return context\n}\n\nconst Carousel = ({\n  orientation = 'horizontal',\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ref,\n  ...props\n}: React.HTMLProps<HTMLDivElement> & CarouselProps) => {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y',\n    },\n    plugins,\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) {\n      return\n    }\n\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext],\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) {\n      return\n    }\n\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    onSelect(api)\n    api.on('reInit', onSelect)\n    api.on('select', onSelect)\n\n    return () => {\n      api?.off('select', onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        api: api,\n        canScrollNext,\n        canScrollPrev,\n        carouselRef,\n        opts,\n        orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n        scrollNext,\n        scrollPrev,\n      }}>\n      <section className={cn('relative', className)} onKeyDownCapture={handleKeyDown} ref={ref} {...props}>\n        {children}\n      </section>\n    </CarouselContext.Provider>\n  )\n}\n\nconst CarouselContent = ({ className, ref, ...props }: React.HTMLProps<HTMLDivElement>) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div className=\"overflow-hidden\" ref={carouselRef}>\n      <div\n        className={cn('flex', orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col', className)}\n        ref={ref}\n        {...props}\n      />\n    </div>\n  )\n}\n\nconst CarouselItem = ({ className, ref, ...props }: React.HTMLProps<HTMLLIElement>) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <li\n      className={cn('min-w-0 shrink-0 grow-0 basis-full', orientation === 'horizontal' ? 'pl-4' : 'pt-4', className)}\n      ref={ref}\n      {...props}\n      aria-roledescription=\"slide\"\n    />\n  )\n}\n\nconst CarouselPrevious = ({\n  className,\n  variant = 'outline',\n  size = 'icon',\n  ref,\n  ...props\n}: React.ComponentProps<typeof Button>) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      className={cn(\n        'absolute h-8 w-8 rounded-full',\n        orientation === 'horizontal'\n          ? '-left-12 -translate-y-1/2 top-1/2'\n          : '-top-12 -translate-x-1/2 left-1/2 rotate-90',\n        className,\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      ref={ref}\n      size={size}\n      variant={variant}\n      {...props}>\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nconst CarouselNext = ({\n  className,\n  variant = 'outline',\n  size = 'icon',\n  ref,\n  ...props\n}: React.ComponentProps<typeof Button>) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      className={cn(\n        'absolute h-8 w-8 rounded-full',\n        orientation === 'horizontal'\n          ? '-right-12 -translate-y-1/2 top-1/2'\n          : '-bottom-12 -translate-x-1/2 left-1/2 rotate-90',\n        className,\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      ref={ref}\n      size={size}\n      variant={variant}\n      {...props}>\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport { type CarouselApi, Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext }\n",
      "path": "carousel/carousel.tsx",
      "target": "components/ui/carousel.tsx",
      "type": "registry:ui"
    },
    {
      "content": "import type useEmblaCarousel from 'embla-carousel-react'\nimport type { UseEmblaCarouselType } from 'embla-carousel-react'\n\nexport type CarouselApi = UseEmblaCarouselType[1]\nexport type UseCarouselParameters = Parameters<typeof useEmblaCarousel>\nexport type CarouselOptions = UseCarouselParameters[0]\nexport type CarouselPlugin = UseCarouselParameters[1]\n\nexport type CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: 'horizontal' | 'vertical'\n  setApi?: (api: CarouselApi) => void\n}\n\nexport type CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n",
      "path": "carousel/carousel.types.ts",
      "target": "components/ui/carousel.types.ts",
      "type": "registry:ui"
    },
    {
      "content": "export * from './carousel'\nexport * from './carousel.types'\n",
      "path": "carousel/index.ts",
      "target": "components/ui/index.ts",
      "type": "registry:ui"
    }
  ],
  "name": "carousel",
  "registryDependencies": [
    "button"
  ],
  "root_folder": "carousel",
  "source": "/registry-ui-duckui/src/carousel",
  "type": "registry:ui"
}