{
  "dependencies": [
    "@gentleduck/primitives",
    "@gentleduck/libs"
  ],
  "files": [
    {
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport { AnimVariants } from '@gentleduck/motion/anim'\nimport AlertDialogPrimitive, { useDialogContext } from '@gentleduck/primitives/alert-dialog'\nimport { X } from 'lucide-react'\nimport type React from 'react'\n\nfunction AlertDialog({\n  closeButton = true,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root closeButton={closeButton} {...props} data-slot=\"alert-dialog\" />\n}\n\nfunction AlertDialogTrigger({\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger {...props} data-slot=\"alert-dialog-trigger\">\n      {children}\n    </AlertDialogPrimitive.Trigger>\n  )\n}\n\nexport function AlertDialogCloseX({\n  ref,\n  size = 16,\n  children,\n  className,\n  ...props\n}: React.HTMLProps<HTMLButtonElement> & {\n  size?: number\n}): React.JSX.Element {\n  const { setOpen } = useDialogContext()\n\n  return (\n    <button\n      {...props}\n      aria-label=\"close\"\n      className={cn(\n        // \"absolute absolute end-3 top-3 top-4 right-4 size-4 cursor-pointer rounded rounded-xs text-accent-foreground opacity-70 opacity-70 ring-offset-background transition-all transition-opacity hover:opacity-100 hover:opacity-100 focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground [&_svg:not([class*='size-'])]:size-4 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n        className,\n      )}\n      data-slot=\"alert-dialog-close-x\"\n      onClick={() => setOpen?.(false)}\n      ref={ref}\n      type=\"button\">\n      {children ?? <X aria-hidden size={size} />}\n    </button>\n  )\n}\n\nfunction AlertDialogContent({\n  children,\n  className,\n  ...props\n}: React.ComponentPropsWithRef<typeof AlertDialogPrimitive.Content>): React.JSX.Element {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\">\n      <AlertDialogPrimitive.Content\n        className={cn(\n          AnimVariants(),\n          '-translate-x-1/2 -translate-y-1/2 pointer-events-none relative top-1/2 left-1/2 z-50 flex h-fit w-full w-full max-w-[500px] flex-col gap-4 overflow-hidden text-balance rounded-lg border border-border bg-popover p-6 text-popover-foreground opacity-0 shadow-sm outline-hidden starting:[&[data-open=true]:opacity-0] data-[open=true]:pointer-events-auto data-[open=true]:opacity-100',\n          className,\n        )}\n        data-slot=\"alert-dialog-content\"\n        dialogClose={AlertDialogCloseX}\n        {...props}>\n        {children}\n      </AlertDialogPrimitive.Content>\n      <AlertDialogPrimitive.Overlay className={cn(AnimVariants())} data-slot=\"alert-dialog-overlay\" />\n    </AlertDialogPrimitive.Portal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof AlertDialogPrimitive.Heading>): React.JSX.Element {\n  return (\n    <AlertDialogPrimitive.Heading\n      className={cn('flex flex-col gap-1.5 text-left rtl:text-right', className)}\n      ref={ref}\n      {...props}\n      data-slot=\"alert-dialog-header\"\n    />\n  )\n}\n\nfunction AlertDialogFooter({ className, ref, ...props }: React.HTMLProps<HTMLDivElement>): React.JSX.Element {\n  return (\n    <div\n      className={cn(`flex flex-col-reverse gap-2 sm:flex-row sm:justify-end`, className)}\n      ref={ref}\n      {...props}\n      data-slot=\"alert-dialog-footer\"\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof AlertDialogPrimitive.Title>): React.JSX.Element {\n  return (\n    <AlertDialogPrimitive.Title\n      className={cn('font-semibold text-lg leading-none tracking-tight', className)}\n      ref={ref}\n      {...props}\n      data-slot=\"alert-dialog-title\"\n    />\n  )\n}\n\nconst AlertDialogDescription = ({\n  className,\n  ref,\n  ...props\n}: React.ComponentPropsWithRef<typeof AlertDialogPrimitive.Description>): React.JSX.Element => (\n  <AlertDialogPrimitive.Description\n    className={cn('text-muted-foreground text-sm', className)}\n    ref={ref}\n    {...props}\n    data-slot=\"alert-dialog-description\"\n  />\n)\n\nconst AlertDialogAction = AlertDialogTrigger\n\nconst AlertDialogCancel = AlertDialogTrigger\n\nexport {\n  AlertDialog,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogTrigger,\n  AlertDialogDescription,\n}\n",
      "path": "alert-dialog/alert-dialog.tsx",
      "target": "components/ui/alert-dialog.tsx",
      "type": "registry:ui"
    },
    {
      "content": "export * from './alert-dialog'\n",
      "path": "alert-dialog/index.ts",
      "target": "components/ui/index.ts",
      "type": "registry:ui"
    }
  ],
  "name": "alert-dialog",
  "registryDependencies": [
    "dialog"
  ],
  "root_folder": "alert-dialog",
  "source": "/registry-ui-duckui/src/alert-dialog",
  "type": "registry:ui"
}