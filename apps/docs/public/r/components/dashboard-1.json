{
  "categories": [
    "dashboards",
    "dashboard"
  ],
  "files": [
    {
      "content": "'use client'\nimport { SidebarInset, SidebarProvider } from '@gentleduck/registry-ui-duckui/sidebar'\nimport { AppSidebar } from './components/app-sidebar'\nimport { ChartAreaInteractive } from './components/chart-area-interactive'\nimport { DataTable } from './components/data-table'\nimport { SectionCards } from './components/section-cards'\nimport { SiteHeader } from './components/site-header'\nimport data from './data.json'\n\nexport default function Page() {\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n      <SidebarInset>\n        <SiteHeader />\n        <div className=\"flex flex-1 flex-col\">\n          <div className=\"@container/main flex flex-1 flex-col gap-2\">\n            <div className=\"flex flex-col gap-4 py-4 md:gap-6 md:py-6\">\n              <SectionCards />\n              <div className=\"px-4 lg:px-6\">\n                <ChartAreaInteractive />\n              </div>\n              <DataTable data={data} />\n            </div>\n          </div>\n        </div>\n      </SidebarInset>\n    </SidebarProvider>\n  )\n}\n",
      "path": "dashboards/dashboard-1/dashboard-1.tsx",
      "target": "components/dashboard-1.tsx",
      "type": "registry:block"
    },
    {
      "content": "'use client'\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from '@gentleduck/registry-ui-duckui/sidebar'\nimport {\n  ArrowUpCircleIcon,\n  BarChartIcon,\n  CameraIcon,\n  ClipboardListIcon,\n  DatabaseIcon,\n  FileCodeIcon,\n  FileIcon,\n  FileTextIcon,\n  FolderIcon,\n  HelpCircleIcon,\n  LayoutDashboardIcon,\n  ListIcon,\n  SearchIcon,\n  SettingsIcon,\n  UsersIcon,\n} from 'lucide-react'\nimport type * as React from 'react'\nimport { NavDocuments } from './nav-documents'\nimport { NavMain } from './nav-main'\nimport { NavSecondary } from './nav-secondary'\nimport { NavUser } from './nav-user'\n\nconst data = {\n  documents: [\n    {\n      icon: DatabaseIcon,\n      name: 'Data Library',\n      url: '#',\n    },\n    {\n      icon: ClipboardListIcon,\n      name: 'Reports',\n      url: '#',\n    },\n    {\n      icon: FileIcon,\n      name: 'Word Assistant',\n      url: '#',\n    },\n  ],\n  navClouds: [\n    {\n      icon: CameraIcon,\n      isActive: true,\n      items: [\n        {\n          title: 'Active Proposals',\n          url: '#',\n        },\n        {\n          title: 'Archived',\n          url: '#',\n        },\n      ],\n      title: 'Capture',\n      url: '#',\n    },\n    {\n      icon: FileTextIcon,\n      items: [\n        {\n          title: 'Active Proposals',\n          url: '#',\n        },\n        {\n          title: 'Archived',\n          url: '#',\n        },\n      ],\n      title: 'Proposal',\n      url: '#',\n    },\n    {\n      icon: FileCodeIcon,\n      items: [\n        {\n          title: 'Active Proposals',\n          url: '#',\n        },\n        {\n          title: 'Archived',\n          url: '#',\n        },\n      ],\n      title: 'Prompts',\n      url: '#',\n    },\n  ],\n  navMain: [\n    {\n      icon: LayoutDashboardIcon,\n      title: 'Dashboard',\n      url: '#',\n    },\n    {\n      icon: ListIcon,\n      title: 'Lifecycle',\n      url: '#',\n    },\n    {\n      icon: BarChartIcon,\n      title: 'Analytics',\n      url: '#',\n    },\n    {\n      icon: FolderIcon,\n      title: 'Projects',\n      url: '#',\n    },\n    {\n      icon: UsersIcon,\n      title: 'Team',\n      url: '#',\n    },\n  ],\n  navSecondary: [\n    {\n      icon: SettingsIcon,\n      title: 'Settings',\n      url: '#',\n    },\n    {\n      icon: HelpCircleIcon,\n      title: 'Get Help',\n      url: '#',\n    },\n    {\n      icon: SearchIcon,\n      title: 'Search',\n      url: '#',\n    },\n  ],\n  user: {\n    avatar: '/avatars/wildduck.jpg',\n    email: 'duck-ui@duck.com',\n    name: 'wildduck',\n  },\n}\n\nexport function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\n  return (\n    <Sidebar collapsible=\"offcanvas\" {...props}>\n      <SidebarHeader>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton asChild className=\"data-[slot=sidebar-menu-button]:!p-1.5\">\n              <a href=\"#placeholder\">\n                <ArrowUpCircleIcon className=\"h-5 w-5\" />\n                <span className=\"font-semibold text-base\">Acme Inc.</span>\n              </a>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarHeader>\n      <SidebarContent>\n        <NavMain items={data.navMain} />\n        <NavDocuments items={data.documents} />\n        <NavSecondary className=\"mt-auto\" items={data.navSecondary} />\n      </SidebarContent>\n      <SidebarFooter>\n        <NavUser user={data.user} />\n      </SidebarFooter>\n    </Sidebar>\n  )\n}\n",
      "path": "dashboards/dashboard-1/components/app-sidebar.tsx",
      "target": "components/app-sidebar.tsx",
      "type": "registry:block"
    },
    {
      "content": "'use client'\n\nimport { useIsMobile } from '@gentleduck/hooks/use-is-mobile'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@gentleduck/registry-ui-duckui/card'\nimport {\n  type ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from '@gentleduck/registry-ui-duckui/chart'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@gentleduck/registry-ui-duckui/select'\nimport { ToggleGroup, ToggleGroupItem } from '@gentleduck/registry-ui-duckui/toggle-group'\nimport * as React from 'react'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\nconst chartData = [\n  { date: '2024-04-01', desktop: 222, mobile: 150 },\n  { date: '2024-04-02', desktop: 97, mobile: 180 },\n  { date: '2024-04-03', desktop: 167, mobile: 120 },\n  { date: '2024-04-04', desktop: 242, mobile: 260 },\n  { date: '2024-04-05', desktop: 373, mobile: 290 },\n  { date: '2024-04-06', desktop: 301, mobile: 340 },\n  { date: '2024-04-07', desktop: 245, mobile: 180 },\n  { date: '2024-04-08', desktop: 409, mobile: 320 },\n  { date: '2024-04-09', desktop: 59, mobile: 110 },\n  { date: '2024-04-10', desktop: 261, mobile: 190 },\n  { date: '2024-04-11', desktop: 327, mobile: 350 },\n  { date: '2024-04-12', desktop: 292, mobile: 210 },\n  { date: '2024-04-13', desktop: 342, mobile: 380 },\n  { date: '2024-04-14', desktop: 137, mobile: 220 },\n  { date: '2024-04-15', desktop: 120, mobile: 170 },\n  { date: '2024-04-16', desktop: 138, mobile: 190 },\n  { date: '2024-04-17', desktop: 446, mobile: 360 },\n  { date: '2024-04-18', desktop: 364, mobile: 410 },\n  { date: '2024-04-19', desktop: 243, mobile: 180 },\n  { date: '2024-04-20', desktop: 89, mobile: 150 },\n  { date: '2024-04-21', desktop: 137, mobile: 200 },\n  { date: '2024-04-22', desktop: 224, mobile: 170 },\n  { date: '2024-04-23', desktop: 138, mobile: 230 },\n  { date: '2024-04-24', desktop: 387, mobile: 290 },\n  { date: '2024-04-25', desktop: 215, mobile: 250 },\n  { date: '2024-04-26', desktop: 75, mobile: 130 },\n  { date: '2024-04-27', desktop: 383, mobile: 420 },\n  { date: '2024-04-28', desktop: 122, mobile: 180 },\n  { date: '2024-04-29', desktop: 315, mobile: 240 },\n  { date: '2024-04-30', desktop: 454, mobile: 380 },\n  { date: '2024-05-01', desktop: 165, mobile: 220 },\n  { date: '2024-05-02', desktop: 293, mobile: 310 },\n  { date: '2024-05-03', desktop: 247, mobile: 190 },\n  { date: '2024-05-04', desktop: 385, mobile: 420 },\n  { date: '2024-05-05', desktop: 481, mobile: 390 },\n  { date: '2024-05-06', desktop: 498, mobile: 520 },\n  { date: '2024-05-07', desktop: 388, mobile: 300 },\n  { date: '2024-05-08', desktop: 149, mobile: 210 },\n  { date: '2024-05-09', desktop: 227, mobile: 180 },\n  { date: '2024-05-10', desktop: 293, mobile: 330 },\n  { date: '2024-05-11', desktop: 335, mobile: 270 },\n  { date: '2024-05-12', desktop: 197, mobile: 240 },\n  { date: '2024-05-13', desktop: 197, mobile: 160 },\n  { date: '2024-05-14', desktop: 448, mobile: 490 },\n  { date: '2024-05-15', desktop: 473, mobile: 380 },\n  { date: '2024-05-16', desktop: 338, mobile: 400 },\n  { date: '2024-05-17', desktop: 499, mobile: 420 },\n  { date: '2024-05-18', desktop: 315, mobile: 350 },\n  { date: '2024-05-19', desktop: 235, mobile: 180 },\n  { date: '2024-05-20', desktop: 177, mobile: 230 },\n  { date: '2024-05-21', desktop: 82, mobile: 140 },\n  { date: '2024-05-22', desktop: 81, mobile: 120 },\n  { date: '2024-05-23', desktop: 252, mobile: 290 },\n  { date: '2024-05-24', desktop: 294, mobile: 220 },\n  { date: '2024-05-25', desktop: 201, mobile: 250 },\n  { date: '2024-05-26', desktop: 213, mobile: 170 },\n  { date: '2024-05-27', desktop: 420, mobile: 460 },\n  { date: '2024-05-28', desktop: 233, mobile: 190 },\n  { date: '2024-05-29', desktop: 78, mobile: 130 },\n  { date: '2024-05-30', desktop: 340, mobile: 280 },\n  { date: '2024-05-31', desktop: 178, mobile: 230 },\n  { date: '2024-06-01', desktop: 178, mobile: 200 },\n  { date: '2024-06-02', desktop: 470, mobile: 410 },\n  { date: '2024-06-03', desktop: 103, mobile: 160 },\n  { date: '2024-06-04', desktop: 439, mobile: 380 },\n  { date: '2024-06-05', desktop: 88, mobile: 140 },\n  { date: '2024-06-06', desktop: 294, mobile: 250 },\n  { date: '2024-06-07', desktop: 323, mobile: 370 },\n  { date: '2024-06-08', desktop: 385, mobile: 320 },\n  { date: '2024-06-09', desktop: 438, mobile: 480 },\n  { date: '2024-06-10', desktop: 155, mobile: 200 },\n  { date: '2024-06-11', desktop: 92, mobile: 150 },\n  { date: '2024-06-12', desktop: 492, mobile: 420 },\n  { date: '2024-06-13', desktop: 81, mobile: 130 },\n  { date: '2024-06-14', desktop: 426, mobile: 380 },\n  { date: '2024-06-15', desktop: 307, mobile: 350 },\n  { date: '2024-06-16', desktop: 371, mobile: 310 },\n  { date: '2024-06-17', desktop: 475, mobile: 520 },\n  { date: '2024-06-18', desktop: 107, mobile: 170 },\n  { date: '2024-06-19', desktop: 341, mobile: 290 },\n  { date: '2024-06-20', desktop: 408, mobile: 450 },\n  { date: '2024-06-21', desktop: 169, mobile: 210 },\n  { date: '2024-06-22', desktop: 317, mobile: 270 },\n  { date: '2024-06-23', desktop: 480, mobile: 530 },\n  { date: '2024-06-24', desktop: 132, mobile: 180 },\n  { date: '2024-06-25', desktop: 141, mobile: 190 },\n  { date: '2024-06-26', desktop: 434, mobile: 380 },\n  { date: '2024-06-27', desktop: 448, mobile: 490 },\n  { date: '2024-06-28', desktop: 149, mobile: 200 },\n  { date: '2024-06-29', desktop: 103, mobile: 160 },\n  { date: '2024-06-30', desktop: 446, mobile: 400 },\n]\n\nconst chartConfig = {\n  desktop: {\n    color: 'var(--chart-1)',\n    label: 'Desktop',\n  },\n  mobile: {\n    color: 'var(--chart-2)',\n    label: 'Mobile',\n  },\n  visitors: {\n    label: 'Visitors',\n  },\n} satisfies ChartConfig\n\nexport function ChartAreaInteractive() {\n  const isMobile = useIsMobile()\n  const [timeRange, setTimeRange] = React.useState('30d')\n\n  React.useEffect(() => {\n    if (isMobile) {\n      setTimeRange('7d')\n    }\n  }, [isMobile])\n\n  const filteredData = chartData.filter((item) => {\n    const date = new Date(item.date)\n    const referenceDate = new Date('2024-06-30')\n    let daysToSubtract = 90\n    if (timeRange === '30d') {\n      daysToSubtract = 30\n    } else if (timeRange === '7d') {\n      daysToSubtract = 7\n    }\n    const startDate = new Date(referenceDate)\n    startDate.setDate(startDate.getDate() - daysToSubtract)\n    return date >= startDate\n  })\n\n  return (\n    <Card className=\"@container/card\">\n      <CardHeader className=\"relative\">\n        <CardTitle>Total Visitors</CardTitle>\n        <CardDescription>\n          <span className=\"@[540px]/card:block hidden\">Total for the last 3 months</span>\n          <span className=\"@[540px]/card:hidden\">Last 3 months</span>\n        </CardDescription>\n        <div className=\"absolute top-4 right-4\">\n          <ToggleGroup\n            className=\"@[767px]/card:flex hidden\"\n            onValueChange={setTimeRange}\n            type=\"single\"\n            value={timeRange}\n            variant=\"outline\">\n            <ToggleGroupItem className=\"h-9 px-2.5\" value=\"90d\">\n              Last 3 months\n            </ToggleGroupItem>\n            <ToggleGroupItem className=\"h-9 px-2.5\" value=\"30d\">\n              Last 30 days\n            </ToggleGroupItem>\n            <ToggleGroupItem className=\"h-9 px-2.5\" value=\"7d\">\n              Last 7 days\n            </ToggleGroupItem>\n          </ToggleGroup>\n          <Select onValueChange={setTimeRange} value={timeRange}>\n            <SelectTrigger aria-label=\"Select a value\" className=\"flex @[767px]/card:hidden w-40\">\n              <SelectValue placeholder=\"Last 3 months\" />\n            </SelectTrigger>\n            <SelectContent className=\"rounded-xl\">\n              <SelectItem className=\"rounded-lg\" value=\"90d\">\n                Last 3 months\n              </SelectItem>\n              <SelectItem className=\"rounded-lg\" value=\"30d\">\n                Last 30 days\n              </SelectItem>\n              <SelectItem className=\"rounded-lg\" value=\"7d\">\n                Last 7 days\n              </SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      <CardContent className=\"px-2 pt-4 sm:px-6 sm:pt-6\">\n        <ChartContainer className=\"aspect-auto h-[250px] w-full\" config={chartConfig}>\n          <AreaChart data={filteredData}>\n            <defs>\n              <linearGradient id=\"fillDesktop\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"var(--color-desktop)\" stopOpacity={1.0} />\n                <stop offset=\"95%\" stopColor=\"var(--color-desktop)\" stopOpacity={0.1} />\n              </linearGradient>\n              <linearGradient id=\"fillMobile\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"var(--color-mobile)\" stopOpacity={0.8} />\n                <stop offset=\"95%\" stopColor=\"var(--color-mobile)\" stopOpacity={0.1} />\n              </linearGradient>\n            </defs>\n            <CartesianGrid vertical={false} />\n            <XAxis\n              axisLine={false}\n              dataKey=\"date\"\n              minTickGap={32}\n              tickFormatter={(value) => {\n                const date = new Date(value)\n                return date.toLocaleDateString('en-US', {\n                  day: 'numeric',\n                  month: 'short',\n                })\n              }}\n              tickLine={false}\n              tickMargin={8}\n            />\n            <ChartTooltip\n              content={\n                <ChartTooltipContent\n                  indicator=\"dot\"\n                  labelFormatter={(value) => {\n                    return new Date(value).toLocaleDateString('en-US', {\n                      day: 'numeric',\n                      month: 'short',\n                    })\n                  }}\n                />\n              }\n              cursor={false}\n            />\n            <Area dataKey=\"mobile\" fill=\"url(#fillMobile)\" stackId=\"a\" stroke=\"var(--color-mobile)\" type=\"natural\" />\n            <Area dataKey=\"desktop\" fill=\"url(#fillDesktop)\" stackId=\"a\" stroke=\"var(--color-desktop)\" type=\"natural\" />\n          </AreaChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n",
      "path": "dashboards/dashboard-1/components/chart-area-interactive.tsx",
      "target": "components/chart-area-interactive.tsx",
      "type": "registry:block"
    },
    {
      "content": "'use client'\n\nimport {\n  closestCenter,\n  DndContext,\n  type DragEndEvent,\n  KeyboardSensor,\n  MouseSensor,\n  TouchSensor,\n  type UniqueIdentifier,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core'\nimport { restrictToVerticalAxis } from '@dnd-kit/modifiers'\nimport { arrayMove, SortableContext, useSortable, verticalListSortingStrategy } from '@dnd-kit/sortable'\nimport { CSS } from '@dnd-kit/utilities'\nimport { useIsMobile } from '@gentleduck/hooks/use-is-mobile'\nimport { Badge } from '@gentleduck/registry-ui-duckui/badge'\nimport { Button } from '@gentleduck/registry-ui-duckui/button'\nimport {\n  type ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from '@gentleduck/registry-ui-duckui/chart'\nimport { Checkbox } from '@gentleduck/registry-ui-duckui/checkbox'\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@gentleduck/registry-ui-duckui/dropdown-menu'\nimport { Input } from '@gentleduck/registry-ui-duckui/input'\nimport { Label } from '@gentleduck/registry-ui-duckui/label'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@gentleduck/registry-ui-duckui/select'\nimport { Separator } from '@gentleduck/registry-ui-duckui/separator'\nimport {\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from '@gentleduck/registry-ui-duckui/sheet'\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@gentleduck/registry-ui-duckui/table'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@gentleduck/registry-ui-duckui/tabs'\nimport {\n  type ColumnDef,\n  type ColumnFiltersState,\n  flexRender,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  type Row,\n  type SortingState,\n  useReactTable,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport {\n  CheckCircle2Icon,\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  ChevronsLeftIcon,\n  ChevronsRightIcon,\n  ColumnsIcon,\n  GripVerticalIcon,\n  LoaderIcon,\n  MoreVerticalIcon,\n  PlusIcon,\n  TrendingUpIcon,\n} from 'lucide-react'\nimport * as React from 'react'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\nimport { toast } from 'sonner'\nimport { z } from 'zod'\n\nexport const schema = z.object({\n  header: z.string(),\n  id: z.number(),\n  limit: z.string(),\n  reviewer: z.string(),\n  status: z.string(),\n  target: z.string(),\n  type: z.string(),\n})\n\n// Create a separate component for the drag handle\nfunction DragHandle({ id }: { id: number }) {\n  const { attributes, listeners } = useSortable({\n    id,\n  })\n\n  return (\n    <Button\n      {...attributes}\n      {...listeners}\n      className=\"size-7 text-muted-foreground hover:bg-transparent\"\n      size=\"icon\"\n      variant=\"ghost\">\n      <GripVerticalIcon className=\"size-3 text-muted-foreground\" />\n      <span className=\"sr-only\">Drag to reorder</span>\n    </Button>\n  )\n}\n\nconst columns: ColumnDef<z.infer<typeof schema>>[] = [\n  {\n    cell: ({ row }) => <DragHandle id={row.original.id} />,\n    header: () => null,\n    id: 'drag',\n  },\n  {\n    cell: ({ row }) => (\n      <div className=\"flex items-center justify-center\">\n        <Checkbox\n          aria-label=\"Select row\"\n          checked={row.getIsSelected()}\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\n        />\n      </div>\n    ),\n    enableHiding: false,\n    enableSorting: false,\n    header: ({ table }) => (\n      <div className=\"flex items-center justify-center\">\n        <Checkbox\n          aria-label=\"Select all\"\n          checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && 'indeterminate')}\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        />\n      </div>\n    ),\n    id: 'select',\n  },\n  {\n    accessorKey: 'header',\n    cell: ({ row }) => {\n      return <TableCellViewer item={row.original} />\n    },\n    enableHiding: false,\n    header: 'Header',\n  },\n  {\n    accessorKey: 'type',\n    cell: ({ row }) => (\n      <div className=\"w-32\">\n        <Badge className=\"px-1.5 text-muted-foreground\" variant=\"outline\">\n          {row.original.type}\n        </Badge>\n      </div>\n    ),\n    header: 'Section Type',\n  },\n  {\n    accessorKey: 'status',\n    cell: ({ row }) => (\n      <Badge className=\"flex gap-1 px-1.5 text-muted-foreground [&_svg]:size-3\" variant=\"outline\">\n        {row.original.status === 'Done' ? (\n          <CheckCircle2Icon className=\"text-green-500 dark:text-green-400\" />\n        ) : (\n          <LoaderIcon />\n        )}\n        {row.original.status}\n      </Badge>\n    ),\n    header: 'Status',\n  },\n  {\n    accessorKey: 'target',\n    cell: ({ row }) => (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault()\n          toast.promise(new Promise((resolve) => setTimeout(resolve, 1000)), {\n            error: 'Error',\n            loading: `Saving ${row.original.header}`,\n            success: 'Done',\n          })\n        }}>\n        <Label className=\"sr-only\" htmlFor={`${row.original.id}-target`}>\n          Target\n        </Label>\n        <Input\n          className=\"h-8 w-16 border-transparent bg-transparent text-right shadow-none hover:bg-input/30 focus-visible:border focus-visible:bg-background\"\n          defaultValue={row.original.target}\n          id={`${row.original.id}-target`}\n        />\n      </form>\n    ),\n    header: () => <div className=\"w-full text-right\">Target</div>,\n  },\n  {\n    accessorKey: 'limit',\n    cell: ({ row }) => (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault()\n          toast.promise(new Promise((resolve) => setTimeout(resolve, 1000)), {\n            error: 'Error',\n            loading: `Saving ${row.original.header}`,\n            success: 'Done',\n          })\n        }}>\n        <Label className=\"sr-only\" htmlFor={`${row.original.id}-limit`}>\n          Limit\n        </Label>\n        <Input\n          className=\"h-8 w-16 border-transparent bg-transparent text-right shadow-none hover:bg-input/30 focus-visible:border focus-visible:bg-background\"\n          defaultValue={row.original.limit}\n          id={`${row.original.id}-limit`}\n        />\n      </form>\n    ),\n    header: () => <div className=\"w-full text-right\">Limit</div>,\n  },\n  {\n    accessorKey: 'reviewer',\n    cell: ({ row }) => {\n      const isAssigned = row.original.reviewer !== 'Assign reviewer'\n\n      if (isAssigned) {\n        return row.original.reviewer\n      }\n\n      return (\n        <>\n          <Label className=\"sr-only\" htmlFor={`${row.original.id}-reviewer`}>\n            Reviewer\n          </Label>\n          <Select placement=\"bottom-end\">\n            <SelectTrigger className=\"h-8 w-40\" id={`${row.original.id}-reviewer`}>\n              <SelectValue placeholder=\"Assign reviewer\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"Eddie Lake\">Eddie Lake</SelectItem>\n              <SelectItem value=\"Jamik Tashpulatov\">Jamik Tashpulatov</SelectItem>\n            </SelectContent>\n          </Select>\n        </>\n      )\n    },\n    header: 'Reviewer',\n  },\n  {\n    cell: () => (\n      <DropdownMenu placement=\"bottom-end\">\n        <DropdownMenuTrigger asChild>\n          <Button className=\"flex size-8 text-muted-foreground data-[state=open]:bg-muted\" size=\"icon\" variant=\"ghost\">\n            <MoreVerticalIcon />\n            <span className=\"sr-only\">Open menu</span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"w-32\">\n          <DropdownMenuItem>Edit</DropdownMenuItem>\n          <DropdownMenuItem>Make a copy</DropdownMenuItem>\n          <DropdownMenuItem>Favorite</DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem>Delete</DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    ),\n    id: 'actions',\n  },\n]\n\nfunction DraggableRow({ row }: { row: Row<z.infer<typeof schema>> }) {\n  const { transform, transition, setNodeRef, isDragging } = useSortable({\n    id: row.original.id,\n  })\n\n  return (\n    <TableRow\n      className=\"relative z-0 data-[dragging=true]:z-10 data-[dragging=true]:opacity-80\"\n      data-dragging={isDragging}\n      data-state={row.getIsSelected() && 'selected'}\n      ref={setNodeRef}\n      style={{\n        transform: CSS.Transform.toString(transform),\n        transition: transition,\n      }}>\n      {row.getVisibleCells().map((cell) => (\n        <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\n      ))}\n    </TableRow>\n  )\n}\n\nexport function DataTable({ data: initialData }: { data: z.infer<typeof schema>[] }) {\n  const [data, setData] = React.useState(() => initialData)\n  const [rowSelection, setRowSelection] = React.useState({})\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [pagination, setPagination] = React.useState({\n    pageIndex: 0,\n    pageSize: 10,\n  })\n  const sortableId = React.useId()\n  const sensors = useSensors(useSensor(MouseSensor, {}), useSensor(TouchSensor, {}), useSensor(KeyboardSensor, {}))\n\n  const dataIds = React.useMemo<UniqueIdentifier[]>(() => data?.map(({ id }) => id) || [], [data])\n\n  const table = useReactTable({\n    columns,\n    data,\n    enableRowSelection: true,\n    getCoreRowModel: getCoreRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getRowId: (row) => row.id.toString(),\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    onPaginationChange: setPagination,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    state: {\n      columnFilters,\n      columnVisibility,\n      pagination,\n      rowSelection,\n      sorting,\n    },\n  })\n\n  function handleDragEnd(event: DragEndEvent) {\n    const { active, over } = event\n    if (active && over && active.id !== over.id) {\n      setData((data) => {\n        const oldIndex = dataIds.indexOf(active.id)\n        const newIndex = dataIds.indexOf(over.id)\n        return arrayMove(data, oldIndex, newIndex)\n      })\n    }\n  }\n\n  return (\n    <Tabs className=\"flex w-full flex-col justify-start gap-6\" defaultValue=\"outline\">\n      <div className=\"flex items-center justify-between px-4 lg:px-6\">\n        <Label className=\"sr-only\" htmlFor=\"view-selector\">\n          View\n        </Label>\n        <TabsList className=\"@4xl/main:flex hidden\">\n          <TabsTrigger value=\"outline\">Outline</TabsTrigger>\n          <TabsTrigger className=\"gap-1\" value=\"past-performance\">\n            Past Performance{' '}\n            <Badge\n              className=\"flex h-5 w-5 items-center justify-center rounded-full bg-muted-foreground/30\"\n              variant=\"secondary\">\n              3\n            </Badge>\n          </TabsTrigger>\n          <TabsTrigger className=\"gap-1\" value=\"key-personnel\">\n            Key Personnel{' '}\n            <Badge\n              className=\"flex h-5 w-5 items-center justify-center rounded-full bg-muted-foreground/30\"\n              variant=\"secondary\">\n              2\n            </Badge>\n          </TabsTrigger>\n          <TabsTrigger value=\"focus-documents\">Focus Documents</TabsTrigger>\n        </TabsList>\n        <div className=\"flex items-center gap-2\">\n          <DropdownMenu placement=\"bottom-end\">\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\">\n                <ColumnsIcon />\n                <span className=\"hidden lg:inline\">Customize Columns</span>\n                <span className=\"lg:hidden\">Columns</span>\n                <ChevronDownIcon />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\">\n              {table\n                .getAllColumns()\n                .filter((column) => typeof column.accessorFn !== 'undefined' && column.getCanHide())\n                .map((column) => {\n                  return (\n                    <DropdownMenuCheckboxItem\n                      checked={column.getIsVisible()}\n                      className=\"capitalize\"\n                      key={column.id}\n                      onCheckedChange={(value) => column.toggleVisibility(!!value)}>\n                      {column.id}\n                    </DropdownMenuCheckboxItem>\n                  )\n                })}\n            </DropdownMenuContent>\n          </DropdownMenu>\n          <Button variant=\"outline\">\n            <PlusIcon />\n            <span className=\"hidden lg:inline\">Add Section</span>\n          </Button>\n        </div>\n      </div>\n      <TabsContent className=\"relative flex flex-col gap-4 overflow-auto px-4 lg:px-6\" value=\"outline\">\n        <div className=\"overflow-hidden rounded-lg border\">\n          <DndContext\n            collisionDetection={closestCenter}\n            id={sortableId}\n            modifiers={[restrictToVerticalAxis]}\n            onDragEnd={handleDragEnd}\n            sensors={sensors}>\n            <Table>\n              <TableHeader className=\"sticky top-0 z-10 bg-muted\">\n                {table.getHeaderGroups().map((headerGroup) => (\n                  <TableRow key={headerGroup.id}>\n                    {headerGroup.headers.map((header) => {\n                      return (\n                        <TableHead colSpan={header.colSpan} key={header.id}>\n                          {header.isPlaceholder\n                            ? null\n                            : flexRender(header.column.columnDef.header, header.getContext())}\n                        </TableHead>\n                      )\n                    })}\n                  </TableRow>\n                ))}\n              </TableHeader>\n              <TableBody className=\"**:data-[slot=table-cell]:first:w-8\">\n                {table.getRowModel().rows?.length ? (\n                  <SortableContext items={dataIds} strategy={verticalListSortingStrategy}>\n                    {table.getRowModel().rows.map((row) => (\n                      <DraggableRow key={row.id} row={row} />\n                    ))}\n                  </SortableContext>\n                ) : (\n                  <TableRow>\n                    <TableCell className=\"h-24 text-center\" colSpan={columns.length}>\n                      No results.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </DndContext>\n        </div>\n        <div className=\"flex items-center justify-between px-4\">\n          <div className=\"hidden flex-1 text-muted-foreground text-sm lg:flex\">\n            {table.getFilteredSelectedRowModel().rows.length} of {table.getFilteredRowModel().rows.length} row(s)\n            selected.\n          </div>\n          <div className=\"flex w-full items-center gap-8 lg:w-fit\">\n            <div className=\"hidden items-center gap-2 lg:flex\">\n              <Label className=\"font-medium text-sm\" htmlFor=\"rows-per-page\">\n                Rows per page\n              </Label>\n              <Select\n                onValueChange={(value) => {\n                  table.setPageSize(Number(value))\n                }}\n                placement=\"top\"\n                value={`${table.getState().pagination.pageSize}`}>\n                <SelectTrigger className=\"w-20\" id=\"rows-per-page\">\n                  <SelectValue placeholder={table.getState().pagination.pageSize.toString()} />\n                </SelectTrigger>\n                <SelectContent>\n                  {[10, 20, 30, 40, 50].map((pageSize) => (\n                    <SelectItem key={pageSize} value={`${pageSize}`}>\n                      {pageSize}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex w-fit items-center justify-center font-medium text-sm\">\n              Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n            </div>\n            <div className=\"ml-auto flex items-center gap-2 lg:ml-0\">\n              <Button\n                className=\"hidden h-8 w-8 p-0 lg:flex\"\n                disabled={!table.getCanPreviousPage()}\n                onClick={() => table.setPageIndex(0)}\n                variant=\"outline\">\n                <span className=\"sr-only\">Go to first page</span>\n                <ChevronsLeftIcon />\n              </Button>\n              <Button\n                className=\"size-8\"\n                disabled={!table.getCanPreviousPage()}\n                onClick={() => table.previousPage()}\n                size=\"icon\"\n                variant=\"outline\">\n                <span className=\"sr-only\">Go to previous page</span>\n                <ChevronLeftIcon />\n              </Button>\n              <Button\n                className=\"size-8\"\n                disabled={!table.getCanNextPage()}\n                onClick={() => table.nextPage()}\n                size=\"icon\"\n                variant=\"outline\">\n                <span className=\"sr-only\">Go to next page</span>\n                <ChevronRightIcon />\n              </Button>\n              <Button\n                className=\"hidden size-8 lg:flex\"\n                disabled={!table.getCanNextPage()}\n                onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n                size=\"icon\"\n                variant=\"outline\">\n                <span className=\"sr-only\">Go to last page</span>\n                <ChevronsRightIcon />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </TabsContent>\n      <TabsContent className=\"flex flex-col px-4 lg:px-6\" value=\"past-performance\">\n        <div className=\"aspect-video w-full flex-1 rounded-lg border border-dashed\"></div>\n      </TabsContent>\n      <TabsContent className=\"flex flex-col px-4 lg:px-6\" value=\"key-personnel\">\n        <div className=\"aspect-video w-full flex-1 rounded-lg border border-dashed\"></div>\n      </TabsContent>\n      <TabsContent className=\"flex flex-col px-4 lg:px-6\" value=\"focus-documents\">\n        <div className=\"aspect-video w-full flex-1 rounded-lg border border-dashed\"></div>\n      </TabsContent>\n    </Tabs>\n  )\n}\n\nconst chartData = [\n  { desktop: 186, mobile: 80, month: 'January' },\n  { desktop: 305, mobile: 200, month: 'February' },\n  { desktop: 237, mobile: 120, month: 'March' },\n  { desktop: 73, mobile: 190, month: 'April' },\n  { desktop: 209, mobile: 130, month: 'May' },\n  { desktop: 214, mobile: 140, month: 'June' },\n]\n\nconst chartConfig = {\n  desktop: {\n    color: 'var(--primary)',\n    label: 'Desktop',\n  },\n  mobile: {\n    color: 'var(--primary)',\n    label: 'Mobile',\n  },\n} satisfies ChartConfig\n\nfunction TableCellViewer({ item }: { item: z.infer<typeof schema> }) {\n  const isMobile = useIsMobile()\n\n  return (\n    <Sheet>\n      <SheetTrigger asChild>\n        <Button className=\"w-fit px-0 text-left text-foreground\" variant=\"link\">\n          {item.header}\n        </Button>\n      </SheetTrigger>\n      <SheetContent className=\"flex flex-col\" side=\"right\">\n        <SheetHeader className=\"gap-1\">\n          <SheetTitle>{item.header}</SheetTitle>\n          <SheetDescription>Showing total visitors for the last 6 months</SheetDescription>\n        </SheetHeader>\n        <div className=\"flex flex-1 flex-col gap-4 overflow-y-auto py-4 text-sm\">\n          {!isMobile && (\n            <>\n              <ChartContainer config={chartConfig}>\n                <AreaChart\n                  accessibilityLayer\n                  data={chartData}\n                  margin={{\n                    left: 0,\n                    right: 10,\n                  }}>\n                  <CartesianGrid vertical={false} />\n                  <XAxis\n                    axisLine={false}\n                    dataKey=\"month\"\n                    hide\n                    tickFormatter={(value) => value.slice(0, 3)}\n                    tickLine={false}\n                    tickMargin={8}\n                  />\n                  <ChartTooltip content={<ChartTooltipContent indicator=\"dot\" />} cursor={false} />\n                  <Area\n                    dataKey=\"mobile\"\n                    fill=\"var(--color-mobile)\"\n                    fillOpacity={0.6}\n                    stackId=\"a\"\n                    stroke=\"var(--color-mobile)\"\n                    type=\"natural\"\n                  />\n                  <Area\n                    dataKey=\"desktop\"\n                    fill=\"var(--color-desktop)\"\n                    fillOpacity={0.4}\n                    stackId=\"a\"\n                    stroke=\"var(--color-desktop)\"\n                    type=\"natural\"\n                  />\n                </AreaChart>\n              </ChartContainer>\n              <Separator />\n              <div className=\"grid gap-2\">\n                <div className=\"flex gap-2 font-medium leading-none\">\n                  Trending up by 5.2% this month <TrendingUpIcon className=\"size-4\" />\n                </div>\n                <div className=\"text-muted-foreground\">\n                  Showing total visitors for the last 6 months. This is just some random text to test the layout. It\n                  spans multiple lines and should wrap around.\n                </div>\n              </div>\n              <Separator />\n            </>\n          )}\n          <form className=\"flex flex-col gap-4\">\n            <div className=\"flex flex-col gap-3\">\n              <Label htmlFor=\"header\">Header</Label>\n              <Input defaultValue={item.header} id=\"header\" />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"flex flex-col gap-3\">\n                <Label htmlFor=\"type\">Type</Label>\n                <Select defaultValue={item.type}>\n                  <SelectTrigger className=\"w-full\" id=\"type\">\n                    <SelectValue placeholder=\"Select a type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Table of Contents\">Table of Contents</SelectItem>\n                    <SelectItem value=\"Executive Summary\">Executive Summary</SelectItem>\n                    <SelectItem value=\"Technical Approach\">Technical Approach</SelectItem>\n                    <SelectItem value=\"Design\">Design</SelectItem>\n                    <SelectItem value=\"Capabilities\">Capabilities</SelectItem>\n                    <SelectItem value=\"Focus Documents\">Focus Documents</SelectItem>\n                    <SelectItem value=\"Narrative\">Narrative</SelectItem>\n                    <SelectItem value=\"Cover Page\">Cover Page</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex flex-col gap-3\">\n                <Label htmlFor=\"status\">Status</Label>\n                <Select defaultValue={item.status}>\n                  <SelectTrigger className=\"w-full\" id=\"status\">\n                    <SelectValue placeholder=\"Select a status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Done\">Done</SelectItem>\n                    <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                    <SelectItem value=\"Not Started\">Not Started</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"flex flex-col gap-3\">\n                <Label htmlFor=\"target\">Target</Label>\n                <Input defaultValue={item.target} id=\"target\" />\n              </div>\n              <div className=\"flex flex-col gap-3\">\n                <Label htmlFor=\"limit\">Limit</Label>\n                <Input defaultValue={item.limit} id=\"limit\" />\n              </div>\n            </div>\n            <div className=\"flex flex-col gap-3\">\n              <Label htmlFor=\"reviewer\">Reviewer</Label>\n              <Select defaultValue={item.reviewer}>\n                <SelectTrigger className=\"w-full\" id=\"reviewer\">\n                  <SelectValue placeholder=\"Select a reviewer\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Eddie Lake\">Eddie Lake</SelectItem>\n                  <SelectItem value=\"Jamik Tashpulatov\">Jamik Tashpulatov</SelectItem>\n                  <SelectItem value=\"Emily Whalen\">Emily Whalen</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </form>\n        </div>\n        <SheetFooter className=\"mt-auto flex gap-2 sm:flex-col sm:space-x-0\">\n          <Button className=\"w-full\">Submit</Button>\n          <SheetClose asChild>\n            <Button className=\"w-full\" variant=\"outline\">\n              Done\n            </Button>\n          </SheetClose>\n        </SheetFooter>\n      </SheetContent>\n    </Sheet>\n  )\n}\n",
      "path": "dashboards/dashboard-1/components/data-table.tsx",
      "target": "components/data-table.tsx",
      "type": "registry:block"
    },
    {
      "content": "'use client'\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@gentleduck/registry-ui-duckui/dropdown-menu'\nimport {\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from '@gentleduck/registry-ui-duckui/sidebar'\nimport { FolderIcon, type LucideIcon, MoreHorizontalIcon, ShareIcon } from 'lucide-react'\n\nexport function NavDocuments({\n  items,\n}: {\n  items: {\n    name: string\n    url: string\n    icon: LucideIcon\n  }[]\n}) {\n  const { isMobile } = useSidebar()\n\n  return (\n    <SidebarGroup className=\"group-data-[collapsible=icon]:hidden\">\n      <SidebarGroupLabel>Documents</SidebarGroupLabel>\n      <SidebarMenu>\n        {items.map((item) => (\n          <SidebarMenuItem key={item.name}>\n            <SidebarMenuButton asChild>\n              <a href={item.url}>\n                <item.icon />\n                <span>{item.name}</span>\n              </a>\n            </SidebarMenuButton>\n            <DropdownMenu placement={isMobile ? 'bottom-end' : 'right-start'}>\n              <DropdownMenuTrigger asChild>\n                <SidebarMenuAction className=\"rounded-sm data-[state=open]:bg-accent\" showOnHover>\n                  <MoreHorizontalIcon />\n                  <span className=\"sr-only\">More</span>\n                </SidebarMenuAction>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-24 rounded-lg\">\n                <DropdownMenuItem>\n                  <FolderIcon />\n                  <span>Open</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <ShareIcon />\n                  <span>Share</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </SidebarMenuItem>\n        ))}\n        <SidebarMenuItem>\n          <SidebarMenuButton className=\"text-sidebar-foreground/70\">\n            <MoreHorizontalIcon className=\"text-sidebar-foreground/70\" />\n            <span>More</span>\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      </SidebarMenu>\n    </SidebarGroup>\n  )\n}\n",
      "path": "dashboards/dashboard-1/components/nav-documents.tsx",
      "target": "components/nav-documents.tsx",
      "type": "registry:block"
    },
    {
      "content": "'use client'\n\nimport { Button } from '@gentleduck/registry-ui-duckui/button'\nimport {\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from '@gentleduck/registry-ui-duckui/sidebar'\nimport { type LucideIcon, MailIcon, PlusCircleIcon } from 'lucide-react'\n\nexport function NavMain({\n  items,\n}: {\n  items: {\n    title: string\n    url: string\n    icon?: LucideIcon\n  }[]\n}) {\n  return (\n    <SidebarGroup>\n      <SidebarGroupContent className=\"flex flex-col gap-2\">\n        <SidebarMenu>\n          <SidebarMenuItem className=\"flex items-center gap-2\">\n            <SidebarMenuButton\n              className=\"min-w-8 bg-primary text-primary-foreground duration-200 ease-linear hover:bg-primary/90 hover:text-primary-foreground active:bg-primary/90 active:text-primary-foreground\"\n              tooltip=\"Quick Create\">\n              <PlusCircleIcon />\n              <span>Quick Create</span>\n            </SidebarMenuButton>\n            <Button className=\"h-9 w-9 shrink-0 group-data-[collapsible=icon]:opacity-0\" size=\"icon\" variant=\"outline\">\n              <MailIcon />\n              <span className=\"sr-only\">Inbox</span>\n            </Button>\n          </SidebarMenuItem>\n        </SidebarMenu>\n        <SidebarMenu>\n          {items.map((item) => (\n            <SidebarMenuItem key={item.title}>\n              <SidebarMenuButton tooltip={item.title}>\n                {item.icon && <item.icon />}\n                <span>{item.title}</span>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  )\n}\n",
      "path": "dashboards/dashboard-1/components/nav-main.tsx",
      "target": "components/nav-main.tsx",
      "type": "registry:block"
    },
    {
      "content": "'use client'\n\nimport {\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from '@gentleduck/registry-ui-duckui/sidebar'\nimport type { LucideIcon } from 'lucide-react'\nimport type * as React from 'react'\n\nexport function NavSecondary({\n  items,\n  ...props\n}: {\n  items: {\n    title: string\n    url: string\n    icon: LucideIcon\n  }[]\n} & React.ComponentPropsWithoutRef<typeof SidebarGroup>) {\n  return (\n    <SidebarGroup {...props}>\n      <SidebarGroupContent>\n        <SidebarMenu>\n          {items.map((item) => (\n            <SidebarMenuItem key={item.title}>\n              <SidebarMenuButton asChild>\n                <a href={item.url}>\n                  <item.icon />\n                  <span>{item.title}</span>\n                </a>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  )\n}\n",
      "path": "dashboards/dashboard-1/components/nav-secondary.tsx",
      "target": "components/nav-secondary.tsx",
      "type": "registry:block"
    },
    {
      "content": "'use client'\n\nimport { Avatar } from '@gentleduck/registry-ui-duckui/avatar'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@gentleduck/registry-ui-duckui/dropdown-menu'\nimport { SidebarMenu, SidebarMenuButton, SidebarMenuItem, useSidebar } from '@gentleduck/registry-ui-duckui/sidebar'\nimport { BellIcon, CreditCardIcon, LogOutIcon, MoreVerticalIcon, UserCircleIcon } from 'lucide-react'\n\nexport function NavUser({\n  user,\n}: {\n  user: {\n    name: string\n    email: string\n    avatar: string\n  }\n}) {\n  const { isMobile } = useSidebar()\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu placement={isMobile ? 'bottom-end' : 'right-end'} sideOffset={4}>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n              size=\"lg\">\n              <Avatar alt={user.name} className=\"h-8 w-8 rounded-lg\" fallback=\"WD\" src={user.avatar} />\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-medium\">{user.name}</span>\n                <span className=\"truncate text-muted-foreground text-xs\">{user.email}</span>\n              </div>\n              <MoreVerticalIcon className=\"ml-auto size-4\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg\">\n            <DropdownMenuLabel className=\"p-0 font-normal\">\n              <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n                <Avatar alt={user.name} className=\"h-8 w-8 rounded-lg\" fallback=\"WD\" src={user.avatar} />\n                <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                  <span className=\"truncate font-medium\">{user.name}</span>\n                  <span className=\"truncate text-muted-foreground text-xs\">{user.email}</span>\n                </div>\n              </div>\n            </DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem>\n                <UserCircleIcon />\n                Account\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <CreditCardIcon />\n                Billing\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <BellIcon />\n                Notifications\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>\n              <LogOutIcon />\n              Log out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  )\n}\n",
      "path": "dashboards/dashboard-1/components/nav-user.tsx",
      "target": "components/nav-user.tsx",
      "type": "registry:block"
    },
    {
      "content": "import { Badge } from '@gentleduck/registry-ui-duckui/badge'\nimport { Card, CardDescription, CardFooter, CardHeader, CardTitle } from '@gentleduck/registry-ui-duckui/card'\nimport { TrendingDownIcon, TrendingUpIcon } from 'lucide-react'\n\nexport function SectionCards() {\n  return (\n    <div className=\"grid @5xl/main:grid-cols-4 @xl/main:grid-cols-2 grid-cols-1 gap-4 px-4 *:data-[slot=card]:bg-gradient-to-t *:data-[slot=card]:from-primary/5 *:data-[slot=card]:to-card *:data-[slot=card]:shadow-xs lg:px-6 dark:*:data-[slot=card]:bg-card\">\n      <Card className=\"@container/card\">\n        <CardHeader className=\"relative\">\n          <CardDescription>Total Revenue</CardDescription>\n          <CardTitle className=\"font-semibold @[250px]/card:text-3xl text-2xl tabular-nums\">$1,250.00</CardTitle>\n          <div className=\"absolute top-4 right-4\">\n            <Badge className=\"flex gap-1 rounded-lg text-xs\" variant=\"outline\">\n              <TrendingUpIcon className=\"size-3\" />\n              +12.5%\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardFooter className=\"flex-col items-start gap-1 text-sm\">\n          <div className=\"line-clamp-1 flex gap-2 font-medium\">\n            Trending up this month <TrendingUpIcon className=\"size-4\" />\n          </div>\n          <div className=\"text-muted-foreground\">Visitors for the last 6 months</div>\n        </CardFooter>\n      </Card>\n      <Card className=\"@container/card\">\n        <CardHeader className=\"relative\">\n          <CardDescription>New Customers</CardDescription>\n          <CardTitle className=\"font-semibold @[250px]/card:text-3xl text-2xl tabular-nums\">1,234</CardTitle>\n          <div className=\"absolute top-4 right-4\">\n            <Badge className=\"flex gap-1 rounded-lg text-xs\" variant=\"outline\">\n              <TrendingDownIcon className=\"size-3\" />\n              -20%\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardFooter className=\"flex-col items-start gap-1 text-sm\">\n          <div className=\"line-clamp-1 flex gap-2 font-medium\">\n            Down 20% this period <TrendingDownIcon className=\"size-4\" />\n          </div>\n          <div className=\"text-muted-foreground\">Acquisition needs attention</div>\n        </CardFooter>\n      </Card>\n      <Card className=\"@container/card\">\n        <CardHeader className=\"relative\">\n          <CardDescription>Active Accounts</CardDescription>\n          <CardTitle className=\"font-semibold @[250px]/card:text-3xl text-2xl tabular-nums\">45,678</CardTitle>\n          <div className=\"absolute top-4 right-4\">\n            <Badge className=\"flex gap-1 rounded-lg text-xs\" variant=\"outline\">\n              <TrendingUpIcon className=\"size-3\" />\n              +12.5%\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardFooter className=\"flex-col items-start gap-1 text-sm\">\n          <div className=\"line-clamp-1 flex gap-2 font-medium\">\n            Strong user retention <TrendingUpIcon className=\"size-4\" />\n          </div>\n          <div className=\"text-muted-foreground\">Engagement exceed targets</div>\n        </CardFooter>\n      </Card>\n      <Card className=\"@container/card\">\n        <CardHeader className=\"relative\">\n          <CardDescription>Growth Rate</CardDescription>\n          <CardTitle className=\"font-semibold @[250px]/card:text-3xl text-2xl tabular-nums\">4.5%</CardTitle>\n          <div className=\"absolute top-4 right-4\">\n            <Badge className=\"flex gap-1 rounded-lg text-xs\" variant=\"outline\">\n              <TrendingUpIcon className=\"size-3\" />\n              +4.5%\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardFooter className=\"flex-col items-start gap-1 text-sm\">\n          <div className=\"line-clamp-1 flex gap-2 font-medium\">\n            Steady performance <TrendingUpIcon className=\"size-4\" />\n          </div>\n          <div className=\"text-muted-foreground\">Meets growth projections</div>\n        </CardFooter>\n      </Card>\n    </div>\n  )\n}\n",
      "path": "dashboards/dashboard-1/components/section-cards.tsx",
      "target": "components/section-cards.tsx",
      "type": "registry:block"
    },
    {
      "content": "import { Separator } from '@gentleduck/registry-ui-duckui/separator'\nimport { SidebarTrigger } from '@gentleduck/registry-ui-duckui/sidebar'\n\nexport function SiteHeader() {\n  return (\n    <header className=\"flex h-12 shrink-0 items-center gap-2 border-b transition-[width,height] ease-linear group-has-data-[collapsible=icon]/sidebar-wrapper:h-12\">\n      <div className=\"flex w-full items-center gap-1 px-4 lg:gap-2 lg:px-6\">\n        <SidebarTrigger className=\"-ml-1\" />\n        <Separator className=\"mx-2 data-[orientation=vertical]:h-4\" orientation=\"vertical\" />\n        <h1 className=\"font-medium text-base\">Documents</h1>\n      </div>\n    </header>\n  )\n}\n",
      "path": "dashboards/dashboard-1/components/site-header.tsx",
      "target": "components/site-header.tsx",
      "type": "registry:block"
    }
  ],
  "name": "dashboard-1",
  "registryDependencies": [
    "button",
    "input",
    "avatar",
    "separator",
    "label",
    "react-hook-form"
  ],
  "root_folder": "dashboards/dashboard-1",
  "source": "/registry-examples-duckui/src/dashboards/dashboard-1",
  "type": "registry:block"
}