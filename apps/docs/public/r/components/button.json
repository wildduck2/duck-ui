{
  "dependencies": [
    "@gentleduck/primitives",
    "@gentleduck/variants",
    "@gentleduck/libs"
  ],
  "files": [
    {
      "content": "import { cva } from '@gentleduck/variants'\n\nexport const buttonVariants = cva(\n  \"relative inline-flex shrink-0 cursor-pointer items-center justify-center gap-2 whitespace-nowrap rounded-md font-medium text-sm outline-none transition-all focus-visible:border-ring focus-visible:outline-hidden focus-visible:ring-[3px] focus-visible:ring-ring/50 disabled:pointer-events-none disabled:opacity-50 aria-invalid:border-destructive aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 [&_svg:not([class*='size-'])]:size-4 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n\n  {\n    defaultVariants: {\n      border: 'default',\n      size: 'default',\n      variant: 'default',\n    },\n    variants: {\n      border: {\n        default: '',\n        destructive: 'border border-destructive/40 bg-destructive/40 hover:border-destructive hover:bg-destructive/65',\n        primary: 'border border-border/40 hover:border-border/80',\n        secondary: 'border border-secondary/40 bg-secondary/40 hover:border-secondary hover:bg-secondary/65',\n        warning: 'border border-warning/40 bg-warning/40 hover:border-warning hover:bg-warning/65',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        icon: 'size-8',\n        lg: 'h-10 px-6 has-[>svg]:px-4',\n        sm: 'h-8 gap-1.5 px-3 has-[>svg]:px-2.5',\n      },\n      variant: {\n        dashed:\n          'border border-input border-dashed bg-background text-accent-foreground shadow-xs hover:bg-accent/50 hover:text-accent-foreground',\n        default: 'bg-primary text-primary-foreground shadow-sm hover:bg-primary/90',\n        destructive: 'bg-destructive/90 text-destructive-foreground shadow-xs hover:bg-destructive/70',\n        expand_icon: 'group relative bg-primary text-primary-foreground hover:bg-primary/90',\n        ghost: 'text-accent-foreground hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n        nothing: '',\n        outline:\n          'border border-input bg-background text-accent-foreground shadow-xs hover:bg-accent hover:text-accent-foreground',\n        secondary: 'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        warning: 'bg-warning/90 text-warning-foreground shadow-xs hover:bg-warning/70',\n      },\n    },\n  },\n)\n",
      "path": "button/button.constants.ts",
      "target": "components/ui/button.constants.ts",
      "type": "registry:ui"
    },
    {
      "content": "import { cn } from '@gentleduck/libs/cn'\nimport { Slot } from '@gentleduck/primitives/slot'\nimport { Loader } from 'lucide-react'\nimport type * as React from 'react'\nimport { buttonVariants } from './button.constants'\nimport type { AnimationIconProps, ButtonProps } from './button.types'\n\n/**\n * Renders a customizable button component, supporting various styles and behaviors.\n */\nfunction Button({\n  children,\n  variant = 'default',\n  size = 'default',\n  border = 'default',\n  asChild,\n  className,\n  loading,\n  isCollapsed,\n  icon,\n  secondIcon,\n  type = 'button',\n  disabled,\n  ref,\n  ...props\n}: ButtonProps): React.JSX.Element {\n  const Component = (asChild ? Slot : 'button') as React.ElementType\n\n  return (\n    <Component\n      {...props}\n      className={cn(\n        buttonVariants({\n          border,\n          className,\n          size: isCollapsed ? 'icon' : size,\n          variant,\n        }),\n      )}\n      disabled={loading ?? disabled}\n      ref={ref}\n      type={type}>\n      {loading ? <Loader className=\"animate-spin\" /> : icon}\n      {!isCollapsed && children}\n      {!isCollapsed && secondIcon && secondIcon}\n    </Component>\n  )\n}\n\n/**\n * Renders an animation icon component.\n */\nfunction AnimationIcon({ children, animationIcon }: AnimationIconProps): React.JSX.Element {\n  return (\n    <>\n      {animationIcon?.icon && animationIcon.iconPlacement === 'left' && (\n        <div className=\"group-hover:-translate-x-1 w-0 translate-x-[-1.3em] pr-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:pr-2 group-hover:opacity-100\">\n          {animationIcon?.icon}\n        </div>\n      )}\n      {children}\n      {animationIcon?.icon && animationIcon.iconPlacement === 'right' && (\n        <div className=\"w-0 translate-x-[1.3em] pl-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:translate-x-0 group-hover:pl-2 group-hover:opacity-100\">\n          {animationIcon?.icon}\n        </div>\n      )}\n    </>\n  )\n}\n\nexport { Button, AnimationIcon }\n",
      "path": "button/button.tsx",
      "target": "components/ui/button.tsx",
      "type": "registry:ui"
    },
    {
      "content": "import type { VariantProps } from '@gentleduck/variants'\nimport type { buttonVariants } from './button.constants'\n\n/**\n * Props for the Button component, combining native button attributes, variant styles, and custom options.\n */\nexport interface ButtonProps\n  extends Omit<React.HTMLProps<HTMLButtonElement>, 'size'>,\n    VariantProps<typeof buttonVariants> {\n  /** Render as child component using Slot (e.g., for custom wrappers) */\n  asChild?: boolean\n  /** Controls collapsed state for buttons like sidebar toggles */\n  isCollapsed?: boolean\n  /** Shows loading state/spinner in the button */\n  loading?: boolean\n  /** Primary icon to display in the button */\n  icon?: React.ReactNode\n  /** Secondary icon (e.g., for split actions or toggles) */\n  secondIcon?: React.ReactNode\n}\n\n/**\n * Props for components that support optional animated icons.\n */\nexport type AnimationIconProps = {\n  /** The content inside the icon wrapper */\n  children: React.ReactNode\n  /**\n   * Optional animated icon configuration.\n   * Modify the variant to use animation styles.\n   */\n  animationIcon?: {\n    /** Icon to animate (if applicable) */\n    icon?: React.ReactNode\n    /** Determines icon position relative to the children */\n    iconPlacement?: 'left' | 'right'\n  }\n}\n",
      "path": "button/button.types.ts",
      "target": "components/ui/button.types.ts",
      "type": "registry:ui"
    },
    {
      "content": "export * from './button'\nexport * from './button.constants'\nexport * from './button.types'\n",
      "path": "button/index.ts",
      "target": "components/ui/index.ts",
      "type": "registry:ui"
    }
  ],
  "name": "button",
  "root_folder": "button",
  "source": "/registry-ui-duckui/src/button",
  "type": "registry:ui"
}