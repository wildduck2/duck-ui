{
  "dependencies": [
    "@gentleduck/libs",
    "@gentleduck/primitives"
  ],
  "files": [
    {
      "content": "'use client'\n\nimport { cn } from '@gentleduck/libs/cn'\nimport { MountMinimal } from '@gentleduck/primitives/mount'\nimport React from 'react'\nimport { Button } from '../button'\n\nconst CollapsibleContext = React.createContext<{\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  wrapperRef: React.RefObject<HTMLDivElement | null>\n  triggerRef: React.RefObject<HTMLButtonElement | null>\n  contentRef: React.RefObject<HTMLDivElement | null>\n  contentId: string\n} | null>(null)\n\nexport function useCollapsible() {\n  const context = React.useContext(CollapsibleContext)\n  if (!context) {\n    throw new Error('useCollapsible must be used within a Collapsible')\n  }\n  return context\n}\n\nfunction Collapsible({\n  children,\n  className,\n  open: openProp,\n  onOpenChange,\n  defaultOpen,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & {\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n  defaultOpen?: boolean\n}) {\n  const wrapperRef = React.useRef<HTMLDivElement>(null)\n  const triggerRef = React.useRef<HTMLButtonElement>(null)\n  const contentRef = React.useRef<HTMLDivElement>(null)\n  const [open, setOpen] = React.useState(openProp ?? defaultOpen ?? false)\n\n  const contentId = React.useId()\n\n  function handleOpenChange(state: boolean) {\n    setOpen(state)\n    onOpenChange?.(state)\n  }\n\n  React.useEffect(() => {\n    if (open) {\n      handleOpenChange(open)\n    }\n\n    function handleClick() {\n      const open = triggerRef.current?.getAttribute('data-open') === 'true'\n      onOpenChange?.(open)\n    }\n\n    triggerRef.current?.addEventListener('click', handleClick)\n    return () => triggerRef.current?.removeEventListener('click', handleClick)\n  }, [open])\n\n  return (\n    <CollapsibleContext.Provider\n      value={{ contentId, contentRef, onOpenChange: handleOpenChange, open, triggerRef, wrapperRef }}>\n      <div\n        className={cn('flex flex-col gap-2', className)}\n        duck-collapsible=\"\"\n        data-slot=\"collapsible\"\n        ref={wrapperRef}\n        {...props}\n        data-open={open}>\n        {children}\n      </div>\n    </CollapsibleContext.Provider>\n  )\n}\n\nfunction CollapsibleTrigger({ children, onClick, ...props }: React.ComponentPropsWithRef<typeof Button>) {\n  const { open, onOpenChange, triggerRef, contentId } = useCollapsible()\n\n  return (\n    <Button\n      aria-controls={contentId}\n      aria-expanded={open}\n      data-open={open}\n      data-slot=\"collapsible-trigger\"\n      duck-collapsible-trigger=\"\"\n      onClick={(e) => {\n        onOpenChange?.(!open)\n        onClick?.(e)\n      }}\n      ref={triggerRef}\n      variant=\"ghost\"\n      {...props}>\n      {children}\n    </Button>\n  )\n}\n\nfunction CollapsibleContent({\n  children,\n  forceMount = false,\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & { forceMount?: boolean }) {\n  const { open, contentRef, contentId } = useCollapsible()\n\n  return (\n    <section\n      aria-hidden={!open}\n      className={cn('h-0 overflow-hidden transition-all duration-300 ease-in-out data-[open=true]:h-auto', className)}\n      data-open={open}\n      duck-collapsible-content=\"\"\n      data-slot=\"collapsible-content\"\n      id={contentId}\n      ref={contentRef}\n      {...props}>\n      <MountMinimal forceMount={forceMount} open={open} ref={contentRef as never}>\n        {children}\n      </MountMinimal>\n    </section>\n  )\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
      "path": "collapsible/collapsible.tsx",
      "target": "components/ui/collapsible.tsx",
      "type": "registry:ui"
    },
    {
      "content": "export * from './collapsible'\n",
      "path": "collapsible/index.ts",
      "target": "components/ui/index.ts",
      "type": "registry:ui"
    }
  ],
  "name": "collapsible",
  "registryDependencies": [
    "button"
  ],
  "root_folder": "collapsible",
  "source": "/registry-ui-duckui/src/collapsible",
  "type": "registry:ui"
}