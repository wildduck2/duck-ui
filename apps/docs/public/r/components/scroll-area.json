{
  "dependencies": [
    "@gentleduck/libs"
  ],
  "files": [
    {
      "content": "export * from './scroll-area'\n",
      "path": "scroll-area/index.ts",
      "target": "components/ui/index.ts",
      "type": "registry:ui"
    },
    {
      "content": "import { cn } from '@gentleduck/libs/cn'\nimport * as React from 'react'\n\ninterface ScrollAreaProps extends React.HTMLAttributes<HTMLDivElement> {\n  alwaysVisible?: boolean\n  viewportClassName?: string\n  orientation?: 'vertical' | 'horizontal' | 'both'\n}\n\nconst ScrollArea = ({\n  children,\n  className,\n  viewportClassName,\n  alwaysVisible = false,\n  orientation = 'vertical',\n  style,\n  ...props\n}: ScrollAreaProps) => {\n  const V_THICKNESS = 4\n  const H_THICKNESS = 4\n  const containerRef = React.useRef<HTMLDivElement>(null)\n  const viewportRef = React.useRef<HTMLDivElement>(null)\n  const vThumbRef = React.useRef<HTMLDivElement>(null)\n  const hThumbRef = React.useRef<HTMLDivElement>(null)\n  const vTrackRef = React.useRef<HTMLDivElement>(null)\n  const hTrackRef = React.useRef<HTMLDivElement>(null)\n\n  const updateThumbs = () => {\n    const viewport = viewportRef.current\n    if (!viewport) return\n    // Vertical\n    if (orientation === 'vertical' || orientation === 'both') {\n      const thumb = vThumbRef.current as HTMLDivElement\n      const track = vTrackRef.current as HTMLDivElement\n      const scrollSize = viewport.scrollHeight\n      const clientSize = viewport.clientHeight\n      const scrollOffset = viewport.scrollTop\n      const ratio = clientSize / scrollSize\n      const thumbSize = Math.max(ratio * clientSize, 24)\n      const maxThumbOffset = track.clientHeight - thumbSize\n      const offset = maxThumbOffset === 0 ? 0 : (scrollOffset / (scrollSize - clientSize)) * maxThumbOffset\n      thumb.style.height = `${thumbSize}px`\n      thumb.style.transform = `translateY(${offset}px)`\n      thumb.style.opacity = ratio < 1 || alwaysVisible ? '1' : '0'\n      track.style.opacity = ratio < 1 || alwaysVisible ? '1' : '0'\n    }\n    // Horizontal\n    if (orientation === 'horizontal' || orientation === 'both') {\n      const thumb = hThumbRef.current as HTMLDivElement\n      const track = hTrackRef.current as HTMLDivElement\n      const scrollSize = viewport.scrollWidth\n      const clientSize = viewport.clientWidth\n      const scrollOffset = viewport.scrollLeft\n      const ratio = clientSize / scrollSize\n      const thumbSize = Math.max(ratio * clientSize, 24)\n      const maxThumbOffset = track.clientWidth - thumbSize\n      const offset = maxThumbOffset === 0 ? 0 : (scrollOffset / (scrollSize - clientSize)) * maxThumbOffset\n      thumb.style.width = `${thumbSize}px`\n      thumb.style.transform = `translateX(${offset}px)`\n      thumb.style.opacity = ratio < 1 || alwaysVisible ? '1' : '0'\n      track.style.opacity = ratio < 1 || alwaysVisible ? '1' : '0'\n    }\n  }\n\n  const startDrag = (isVertical: boolean, clientPos: number) => {\n    const viewport = viewportRef.current as HTMLDivElement\n    const thumb = isVertical ? (vThumbRef.current as HTMLDivElement) : (hThumbRef.current as HTMLDivElement)\n    const track = isVertical ? (vTrackRef.current as HTMLDivElement) : (hTrackRef.current as HTMLDivElement)\n    const thumbSize = isVertical ? thumb.offsetHeight : thumb.offsetWidth\n    const trackSize = isVertical ? track.offsetHeight : track.offsetWidth\n    const maxThumbOffset = trackSize - thumbSize\n    const scrollRange = isVertical\n      ? viewport.scrollHeight - viewport.clientHeight\n      : viewport.scrollWidth - viewport.clientWidth\n    const initialOffset = parseFloat(thumb.style.transform.match(/-?\\d+\\.?\\d*/)?.[0] || '0')\n\n    const onMouseMove = (e: MouseEvent) => {\n      const delta = (isVertical ? e.clientY : e.clientX) - clientPos\n      const thumbOffset = Math.min(Math.max(initialOffset + delta, 0), maxThumbOffset)\n      const scrollOffset = (thumbOffset / maxThumbOffset) * scrollRange\n      if (isVertical) viewport.scrollTop = scrollOffset\n      else viewport.scrollLeft = scrollOffset\n    }\n    const onMouseUp = () => {\n      document.removeEventListener('mousemove', onMouseMove)\n      document.removeEventListener('mouseup', onMouseUp)\n    }\n    document.addEventListener('mousemove', onMouseMove)\n    document.addEventListener('mouseup', onMouseUp)\n  }\n\n  const onDragThumb = (e: React.MouseEvent<HTMLDivElement>, isVertical: boolean) => {\n    e.preventDefault()\n    startDrag(isVertical, isVertical ? e.clientY : e.clientX)\n  }\n\n  const onClickTrack = (e: React.MouseEvent<HTMLDivElement>, isVertical: boolean) => {\n    const viewport = viewportRef.current as HTMLDivElement\n    const thumb = isVertical ? (vThumbRef.current as HTMLDivElement) : (hThumbRef.current as HTMLDivElement)\n    const track = isVertical ? (vTrackRef.current as HTMLDivElement) : (hTrackRef.current as HTMLDivElement)\n    if (e.target === thumb) return\n    const rect = track.getBoundingClientRect()\n    const clickPos = isVertical ? e.clientY - rect.top : e.clientX - rect.left\n    const thumbSize = isVertical ? thumb.offsetHeight : thumb.offsetWidth\n    const maxThumbOffset = (isVertical ? track.offsetHeight : track.offsetWidth) - thumbSize\n    const newThumbOffset = Math.min(Math.max(clickPos - thumbSize / 2, 0), maxThumbOffset)\n    const scrollRange = isVertical\n      ? viewport.scrollHeight - viewport.clientHeight\n      : viewport.scrollWidth - viewport.clientWidth\n    const scrollOffset = (newThumbOffset / maxThumbOffset) * scrollRange\n    if (isVertical) viewport.scrollTop = scrollOffset\n    else viewport.scrollLeft = scrollOffset\n  }\n\n  React.useEffect(() => {\n    const viewport = viewportRef.current as HTMLDivElement\n    updateThumbs()\n    viewport.addEventListener('scroll', updateThumbs)\n    const obs = new ResizeObserver(updateThumbs)\n    obs.observe(viewport)\n    return () => {\n      viewport.removeEventListener('scroll', updateThumbs)\n      obs.disconnect()\n    }\n  }, [orientation])\n\n  // Styles\n  const isV = orientation === 'vertical' || orientation === 'both'\n  const isH = orientation === 'horizontal' || orientation === 'both'\n  const vTrackStyle: React.CSSProperties = { height: '100%', right: 0, top: 0, width: V_THICKNESS }\n  const hTrackStyle: React.CSSProperties = { bottom: 0, height: H_THICKNESS, left: 0, width: '100%' }\n  const paddingStyle: React.CSSProperties = {\n    paddingBottom: isH ? H_THICKNESS : 0,\n    paddingRight: isV ? V_THICKNESS : 0,\n  }\n\n  return (\n    <div className={cn('relative overflow-hidden', className)} ref={containerRef} style={style} {...props}>\n      <div\n        className={cn('scrollbar-none h-full w-full overflow-auto', viewportClassName)}\n        ref={viewportRef}\n        style={paddingStyle}>\n        {children}\n      </div>\n\n      {isV && (\n        <div\n          aria-hidden=\"true\"\n          className=\"absolute bg-transparent opacity-0 hover:opacity-100\"\n          onMouseDown={(e) => onClickTrack(e, true)}\n          ref={vTrackRef}\n          style={vTrackStyle}>\n          <div\n            aria-hidden=\"true\"\n            className=\"absolute right-0 w-full rounded-full bg-secondary hover:bg-secondary\"\n            onMouseDown={(e) => onDragThumb(e, true)}\n            ref={vThumbRef}\n          />\n        </div>\n      )}\n\n      {isH && (\n        <div\n          aria-hidden=\"true\"\n          className=\"absolute bg-transparent opacity-0 hover:opacity-100\"\n          onMouseDown={(e) => onClickTrack(e, false)}\n          ref={hTrackRef}\n          style={hTrackStyle}>\n          <div\n            aria-hidden=\"true\"\n            className=\"absolute bottom-0 h-full rounded-full bg-secondary hover:bg-secondary\"\n            onMouseDown={(e) => onDragThumb(e, false)}\n            ref={hThumbRef}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport { ScrollArea }\n",
      "path": "scroll-area/scroll-area.tsx",
      "target": "components/ui/scroll-area.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "scroll-area",
  "root_folder": "scroll-area",
  "source": "/registry-ui-duckui/src/scroll-area",
  "type": "registry:ui"
}